dnl(
/*
    The client/server state is modelled as being a large struct of values, 
    initialised to the string '0' (in absense of a null value).

    By using PrevClientState -> set_state() -> ClientState (and equivalent
    server macros) this large state is carried forwards for rule premises
    and conclusions.

    Ensure that set_state() is at the top of the 'let' block, so that any
    updated values can be safely redefined afterwards.
*/)


// state.m4i imports

dnl(
/*
    This defines the structure of the client's state that we expect.
    All values must be defined, but any non-initialised values can be set to '0'
*/)
define(<!TLSState!>, <! dnl
res_psk, dnl resumption PSK
messages, dnl message transcript
nc, dnl client nonce
ns, dnl server nonce
ekem, dnl chosen kex KEM
sekem, dnl supported kex KEMs
hrr, dnl tracks whether HRR has been sent 
esk, dnl kex private KEM key
epk, dnl kex public key
ect, dnl kex ciphertext
ess, dnl kex shared secret
eseed, dnl kex encaps seed
clauth_ss, dnl client auth kem shared secret
psk_ke_mode, dnl psk key exchange mode
psk_id, dnl psk identity/ticket
edi, dnl early data indication
es, dnl early secret
hs, dnl handshake secret
ahs, dnl auth handshake secret
ms, dnl master secret
cats, dnl client application traffic secret
sats, dnl server application traffic secret
hs_keyc, dnl client handshake key
hs_keys, dnl server handshake key
ahs_keyc, dnl client authenticated handshake key
ahs_keys, dnl server authenticated handshake key
auth_status, dnl peer's authentication status
ems, dnl exporter master secret
rms, dnl resumption master secret
cert_req dnl certificate request flag
!>)


define(<!init_state!>, <! dnl
messages = '0'
res_psk = '0'
nc = '0'
ns = '0'
ekem = '0'
sekem = '0'
hrr = '0'
esk = '0'
epk = '0'
ect = '0'
ess = '0'
eseed = '0'
clauth_ss = '0'
psk_ke_mode = 'na'
psk_id = '0'
edi = '0'
es = '0'
hs = '0'
ahs = '0'
ms = '0'
cats = '0'
sats = '0'
hs_keyc = '0'
hs_keys = '0'
ahs_keyc = '0'
ahs_keys = '0'
auth_status = <'0', '0'>
ems = '0'
rms = '0'
cert_req = '0'
!>)

define(<!PrevState!>, <! dnl
prev_res_psk, dnl
prev_messages, dnl
prev_nc, dnl
prev_ns, dnl
prev_ekem, dnl
prev_sekem, dnl
prev_hrr, dnl
prev_esk, dnl
prev_epk, dnl
prev_ect, dnl
prev_ess, dnl
prev_eseed, dnl
prev_clauth_ss, dnl
prev_psk_ke_mode, dnl
prev_psk_id, dnl
prev_edi, dnl
prev_es, dnl
prev_hs, dnl
prev_ahs, dnl
prev_ms, dnl
prev_cats, dnl
prev_sats, dnl
prev_hs_keyc, dnl
prev_hs_keys, dnl
prev_hs_keyc, dnl
prev_hs_keys, dnl
prev_auth_status, dnl
prev_ems, dnl
prev_rms, dnl
prev_cert_req dnl
!>)


define(<!set_state!>, <!
res_psk = prev_res_psk
nc = prev_nc
ns = prev_ns
ekem = prev_ekem
sekem = prev_sekem
esk = prev_esk
epk = prev_epk
ect = prev_ect
ess = prev_ess
eseed = prev_eseed
clauth_ss = prev_clauth_ss
hrr = prev_hrr
psk_ke_mode = prev_psk_ke_mode
psk_id = prev_psk_id
edi = prev_edi
es = prev_es
hs = prev_hs
ahs = prev_ahs
ms = prev_ms
cats = prev_cats
sats = prev_sats
hs_keyc = prev_hs_keyc
hs_keys = prev_hs_keys
ahs_keyc = prev_ahs_keyc
hs_keys = prev_ahs_keys
auth_status = prev_auth_status
messages = prev_messages
ems = prev_ems
rms = prev_rms
cert_req = prev_cert_req
tid = ~tid
!>)

define(<!ClientState!>, <!TLSState!>)
define(<!ServerState!>, <!TLSState!>)
define(<!PrevClientState!>, <!PrevState!>)
define(<!PrevServerState!>, <!PrevState!>)
