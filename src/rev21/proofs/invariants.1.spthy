theory TLS_13_invariants begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: Expand/3, Extract/2, fst/1, h/1, hmac/1, kemdecaps/3,
           kemencaps/3, kempk/2, mac/1, mask/2, pair/2, pk/1, sdec/2, senc/2,
           sign/2, snd/1, true/0, unmask/2, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    kemdecaps(g, kemencaps(g, ss, kempk(g, sk)), sk) = ss,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    unmask(mask(x, y), x) = y,
    unmask(mask(x, y), y) = x,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



/*
looping facts with injective instances:
  DHExp/3, EarlySendStream/6, F_State_C1/29
*/

section{* TLS 1.3 *}

restriction Eq_check_succeed:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Neq_check_succeed:
  "∀ x y #i. (Neq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

restriction one_ltk:
  "∀ A x y #i #j.
    ((GenLtk( A, x ) @ #i) ∧ (GenLtk( A, y ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction one_role_per_actor:
  "∀ actor tid tid2 role role2 #i #j.
    ((Start( tid, actor, role ) @ #i) ∧ (Start( tid2, actor, role2 ) @ #j)) ⇒
    (role = role2)"
  // safety formula

rule (modulo E) Register_pk:
   [ Fr( ~ltkA ) ]
  --[ GenLtk( $A, ~ltkA ), HonestUse( ~ltkA ) ]->
   [ !Ltk( $A, ~ltkA ), !Pk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Ltk:
   [ !Ltk( $A, ~ltkA ) ] --[ RevLtk( $A ) ]-> [ Out( ~ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) client_hello:
   [ Fr( ~nc ), Fr( ~x ) ]
  --[
  C0( ~nc ), Start( ~nc, $C, 'client' ),
  RIdentity( ~nc, $C, 'client', $C ), Neq( $g1, $g2 ), DH( ~nc, $C, ~x ),
  HonestUse( ~x ), HonestUse( kempk($g1, ~x) )
  ]->
   [
   F_State_C1( ~nc, $C, $S, '0',
               <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
                <'10', $g1, $g2>, <'13', $sig_algs>, '40', $g1, kempk($g1, ~x)>,
               ~nc, '0', $g1, <$g1, $g2>, '0', ~x, '0', kempk($g1, ~x), '0', '0', 'na',
               '0', '0', Extract('0', '0'), '0', '0', '0', '0', '0', '0', <'0', '0'>,
               '0', '0', '0'
   ),
   DHExp( ~x, ~nc, $C ),
   Out( <'1', '0x0303', ~nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
         <'10', $g1, $g2>, <'13', $sig_algs>, '40', $g1, kempk($g1, ~x)>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_hello_retry_request:
   [
   F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g1,
               <$g1, $g2>, '0', p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
               p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems, p_rms, p_cert_req
   ),
   Fr( ~new_x ), In( <'6', '0x0303', '40', $g2> ), DHExp( p_x, ~tid, $C )
   ]
  --[
  C1_retry( ~tid ), Neq( $g1, $g2 ), Instance( ~tid, $C, 'client' ),
  DeleteDH( ~tid, $C, p_x ), DH( ~tid, $C, ~new_x )
  ]->
   [
   Out( <'1', '0x0303', p_nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
         <'10', $g1, $g2>, <'13', $sig_algs>, '40', $g2, kempk($g2, ~new_x)>
   ),
   DHExp( ~new_x, ~tid, $C ),
   F_State_C1( ~tid, $C, $S, p_res_psk,
               <<p_messages, '6', '0x0303', '40', $g2>, '1', '0x0303', p_nc, '0', 
                $cipher_suites, '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                <'13', $sig_algs>, '40', $g2, kempk($g2, ~new_x)>,
               p_nc, p_ns, $g2, <$g1, $g2>, 'hrr', ~new_x, p_y, kempk($g2, ~new_x),
               p_gy, p_gxy, 'na', p_psk_id, p_edi, Extract(p_res_psk, '0'), p_hs, p_ms,
               p_cats, p_sats, p_hs_keyc, p_hs_keys, <'0', '0'>, p_ems, p_rms,
               p_cert_req
   )
   ]

  // loop breaker: [3]
  /* has exactly the trivial AC variant */

rule (modulo E) recv_server_hello:
   [
   F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g, p_sg,
               p_hrr, ~x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, '40', $g, 
        kemencaps($g, <p_gx, new_y>, p_gx)>
   )
   ]
  --[
  C1( ~tid ), Instance( ~tid, $C, 'client' ),
  Neq( kemencaps($g, <p_gx, new_y>, p_gx), $g ),
  Neq( kemdecaps($g, kemencaps($g, <p_gx, new_y>, p_gx), ~x), $g ),
  DHChal( $g, ~x, new_y, p_gx, kemencaps($g, <p_gx, new_y>, p_gx),
          kemdecaps($g, kemencaps($g, <p_gx, new_y>, p_gx), ~x)
  ),
  RNonces( ~tid, $C, 'client', <p_nc, new_ns> )
  ]->
   [
   F_State_C2a( ~tid, $C, $S, p_res_psk,
                <p_messages, '2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
                 '40', $g, kemencaps($g, <p_gx, new_y>, p_gx)>,
                p_nc, new_ns, $g, p_sg, p_hrr, ~x, p_y, p_gx,
                kemencaps($g, <p_gx, new_y>, p_gx),
                kemdecaps($g, kemencaps($g, <p_gx, new_y>, p_gx), ~x), 'na', p_psk_id,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                <'0', '0'>, p_ems, p_rms, p_cert_req
   )
   ]

  /*
  rule (modulo AC) recv_server_hello:
     [
     F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g, p_sg,
                 p_hrr, ~x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                 p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                 p_rms, p_cert_req
     )[no_precomp],
     In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, '40', $g, 
          kemencaps($g, <p_gx, new_y>, p_gx)>
     )
     ]
    --[
    C1( ~tid ), Instance( ~tid, $C, 'client' ),
    Neq( kemencaps($g, <p_gx, new_y>, p_gx), $g ), Neq( z, $g ),
    DHChal( $g, ~x, new_y, p_gx, kemencaps($g, <p_gx, new_y>, p_gx), z ),
    RNonces( ~tid, $C, 'client', <p_nc, new_ns> )
    ]->
     [
     F_State_C2a( ~tid, $C, $S, p_res_psk,
                  <p_messages, '2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
                   '40', $g, kemencaps($g, <p_gx, new_y>, p_gx)>,
                  p_nc, new_ns, $g, p_sg, p_hrr, ~x, p_y, p_gx,
                  kemencaps($g, <p_gx, new_y>, p_gx), z, 'na', p_psk_id, p_edi, p_es, p_hs,
                  p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, <'0', '0'>, p_ems, p_rms,
                  p_cert_req
     )
     ]
    variants (modulo AC)
    1. $g    = $g.45
       ~x    = ~x.48
       new_y = new_y.50
       p_gx  = kempk($g.45, ~x.48)
       z     = <kempk($g.45, ~x.48), new_y.50>
    
    2. $g    = $g.52
       ~x    = ~x.55
       new_y = new_y.57
       p_gx  = p_gx.64
       z     = kemdecaps($g.52, kemencaps($g.52, <p_gx.64, new_y.57>, p_gx.64),
                         ~x.55)
  */

rule (modulo E) client_gen_keys:
   [
   F_State_C2a( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                p_rms, p_cert_req
   )[no_precomp],
   DHExp( p_x, ~tid, $C )
   ]
  --[
  C2a( ~tid ), Instance( ~tid, $C, 'client' ),
  RMS( ~tid, $C, 'client', Extract('0', Extract(p_gxy, p_es)) ),
  RHS( ~tid, $C, 'client', Extract(p_gxy, p_es) ),
  DeleteDH( ~tid, $C, p_x )
  ]->
   [
   F_State_C2b( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                Extract(p_gxy, p_es), Extract('0', Extract(p_gxy, p_es)), p_cats, p_sats,
                Expand(Expand(Extract(p_gxy, p_es), <'clienthts', h(p_messages)>, '32'),
                       <'kshe_wk', '0'>, '32'),
                Expand(Expand(Extract(p_gxy, p_es), <'serverhts', h(p_messages)>, '32'),
                       <'kshe_wk', '0'>, '32'),
                p_auth_status, p_ems, p_rms, p_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_encrypted_extensions:
   [
   F_State_C2b( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                p_rms, p_cert_req
   )[no_precomp],
   In( senc(<'8', $exts>, p_hs_keys) )
   ]
  --[ C2b( ~tid ), Instance( ~tid, $C, 'client' ) ]->
   [
   F_State_C2c( ~tid, $C, $S, p_res_psk, <p_messages, '8', $exts>, p_nc,
                p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
                p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_certificate_request:
   [
   F_State_C2c( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es, p_hs,
                p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
                p_cert_req
   )[no_precomp],
   In( senc(<'13', '0', $certificate_extensions>, p_hs_keys) )
   ]
  --[ C2c_req( ~tid ), Instance( ~tid, $C, 'client' ) ]->
   [
   F_State_C2d( ~tid, $C, $S, p_res_psk,
                <p_messages, '13', '0', $certificate_extensions>, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es, p_hs,
                p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
                '1'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) skip_recv_certificate_request:
   [
   F_State_C2c( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                p_rms, p_cert_req
   )[no_precomp]
   ]
  --[ C2c( ~tid ), Instance( ~tid, $C, 'client' ) ]->
   [
   F_State_C2d( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                p_rms, '0'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_server_auth:
   [
   F_State_C2d( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es, p_hs,
                p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
                p_cert_req
   )[no_precomp],
   !Pk( $S, pk(~ltkS) ),
   In( senc(<<'11', '0', pk(~ltkS)>, <'15', signature>, '20', verify_data>,
            p_hs_keys)
   )
   ]
  --[
  C2d( ~tid ), Instance( ~tid, $C, 'client' ), Eq( 'na', 'na' ),
  Eq( verify(signature,
             <'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, pk(~ltkS)),
      true
  ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(p_hs,
                          <'serverhts', h(<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>)>,
                          '32'),
                   <'fin', '0'>, '32'), 
            h(<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>)>)
  ),
  RMode( ~tid, $C, 'client', 'na' ),
  CIdentity( ~tid, $C, 'client', <$S, '0', 'auth'> ),
  CHS( ~tid, $C, 'client', p_hs ),
  CTranscript( ~tid, $C, 'client',
               <<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', verify_data
               >
  ),
  CNonces( ~tid, $C, 'client', <p_nc, p_ns> )
  ]->
   [
   F_State_C3( ~tid, $C, $S, p_res_psk,
               <<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', verify_data
               >,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na',
               p_psk_id, p_edi, p_es, p_hs, p_ms,
               Expand(p_ms,
                      <'clientats', 
                       h(<<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                          verify_data>)
                      >,
                      '32'),
               Expand(p_ms,
                      <'serverats', 
                       h(<<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                          verify_data>)
                      >,
                      '32'),
               p_hs_keyc, p_hs_keys, <'0', 'auth'>,
               Expand(p_ms,
                      <'ems', 
                       h(<<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                          verify_data>)
                      >,
                      '32'),
               p_rms, p_cert_req
   ),
   RecvStream( ~tid, $C, $S, <'0', 'auth'>,
               Expand(Expand(p_ms,
                             <'serverats', 
                              h(<<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                                 verify_data>)
                             >,
                             '32'),
                      <'adke_wk', '0'>, '32')
   )
   ]

  /*
  rule (modulo AC) recv_server_auth:
     [
     F_State_C2d( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                  p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es, p_hs,
                  p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
                  p_cert_req
     )[no_precomp],
     !Pk( $S, pk(~ltkS) ),
     In( senc(<<'11', '0', pk(~ltkS)>, <'15', signature>, '20', verify_data>,
              p_hs_keys)
     )
     ]
    --[
    C2d( ~tid ), Instance( ~tid, $C, 'client' ), Eq( 'na', 'na' ),
    Eq( z, true ),
    Eq( verify_data,
        hmac(<
              Expand(Expand(p_hs,
                            <'serverhts', h(<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>)>,
                            '32'),
                     <'fin', '0'>, '32'), 
              h(<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>)>)
    ),
    RMode( ~tid, $C, 'client', 'na' ),
    CIdentity( ~tid, $C, 'client', <$S, '0', 'auth'> ),
    CHS( ~tid, $C, 'client', p_hs ),
    CTranscript( ~tid, $C, 'client',
                 <<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', verify_data
                 >
    ),
    CNonces( ~tid, $C, 'client', <p_nc, p_ns> )
    ]->
     [
     F_State_C3( ~tid, $C, $S, p_res_psk,
                 <<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', verify_data
                 >,
                 p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na',
                 p_psk_id, p_edi, p_es, p_hs, p_ms,
                 Expand(p_ms,
                        <'clientats', 
                         h(<<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                            verify_data>)
                        >,
                        '32'),
                 Expand(p_ms,
                        <'serverats', 
                         h(<<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                            verify_data>)
                        >,
                        '32'),
                 p_hs_keyc, p_hs_keys, <'0', 'auth'>,
                 Expand(p_ms,
                        <'ems', 
                         h(<<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                            verify_data>)
                        >,
                        '32'),
                 p_rms, p_cert_req
     ),
     RecvStream( ~tid, $C, $S, <'0', 'auth'>,
                 Expand(Expand(p_ms,
                               <'serverats', 
                                h(<<<p_messages, '11', '0', pk(~ltkS)>, '15', signature>, '20', 
                                   verify_data>)
                               >,
                               '32'),
                        <'adke_wk', '0'>, '32')
     )
     ]
    variants (modulo AC)
    1. ~ltkS = ~ltkS.62
       p_messages
             = p_messages.78
       signature
             = sign(<'server_cv', h(<p_messages.78, '11', '0', pk(~ltkS.62)>)>,
                    ~ltkS.62)
       z     = true
    
    2. ~ltkS = ~ltkS.73
       p_messages
             = p_messages.89
       signature
             = signature.100
       z     = verify(signature.100,
                      <'server_cv', h(<p_messages.89, '11', '0', pk(~ltkS.73)>)>, pk(~ltkS.73))
  */

rule (modulo E) client_auth:
   [
   F_State_C3( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, '0'
   )[no_precomp]
   ]
  --[
  C3( ~tid ), Instance( ~tid, $C, 'client' ),
  RTranscript( ~tid, $C, 'client',
               <p_messages, '20', 
                hmac(<
                      Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'), <'fin', '0'>,
                             '32'), 
                      h(p_messages)>)
               >
  ),
  RHSMS( ~tid, $C, 'client', <p_hs, p_ms> ),
  RRMS( ~tid, $C, 'client',
        <$S, 
         Expand(p_ms,
                <'rms', 
                 h(<p_messages, '20', 
                    hmac(<
                          Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'), <'fin', '0'>,
                                 '32'), 
                          h(p_messages)>)
                   >)
                >,
                '32'), 
         p_messages, '20', 
         hmac(<
               Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'), <'fin', '0'>,
                      '32'), 
               h(p_messages)>)
        >
  ),
  RMode( ~tid, $C, 'client', p_psk_ke_mode ),
  SessionKey( ~tid, $C, $S, p_auth_status,
              <Expand(p_cats, <'adke_wk', '0'>, '32'), 
               Expand(p_sats, <'adke_wk', '0'>, '32')>
  )
  ]->
   [
   F_State_C4( ~tid, $C, $S, p_res_psk,
               <p_messages, '20', 
                hmac(<
                      Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'), <'fin', '0'>,
                             '32'), 
                      h(p_messages)>)
               >,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
               p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems,
               Expand(p_ms,
                      <'rms', 
                       h(<p_messages, '20', 
                          hmac(<
                                Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'), <'fin', '0'>,
                                       '32'), 
                                h(p_messages)>)
                         >)
                      >,
                      '32'),
               '0'
   ),
   Out( senc(<'20', 
              hmac(<
                    Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'), <'fin', '0'>,
                           '32'), 
                    h(p_messages)>)
             >,
             p_hs_keyc)
   ),
   SendStream( ~tid, $C, $S, p_auth_status,
               Expand(p_cats, <'adke_wk', '0'>, '32')
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) client_auth_cert:
   [
   F_State_C3( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es, p_hs,
               p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
               '1'
   )[no_precomp],
   RecvStream( ~tid, $C, $S, p_auth_status,
               Expand(p_sats, <'adke_wk', '0'>, '32')
   ),
   !Ltk( $C, ~ltkC )
   ]
  --[
  C3_cert( ~tid ), Instance( ~tid, $C, 'client' ),
  UseLtk( ~ltkC,
          sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
  ),
  RHSMS( ~tid, $C, 'client', <p_hs, p_ms> ),
  RTranscript( ~tid, $C, 'client',
               <
                <<p_messages, '11', '0', pk(~ltkC)>, '15', 
                 sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>, 
                '20', 
                hmac(<
                      Expand(Expand(p_hs,
                                    <'clienthts', 
                                     h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                                        sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                         sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                     >)
               >
  ),
  RRMS( ~tid, $C, 'client',
        <$S, 
         Expand(p_ms,
                <'rms', 
                 h(<
                    <<p_messages, '11', '0', pk(~ltkC)>, '15', 
                     sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>, 
                    '20', 
                    hmac(<
                          Expand(Expand(p_hs,
                                        <'clienthts', 
                                         h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                                            sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
                                           >)
                                        >,
                                        '32'),
                                 <'fin', '0'>, '32'), 
                          h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                             sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                         >)
                   >)
                >,
                '32'), 
         <<p_messages, '11', '0', pk(~ltkC)>, '15', 
          sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>, 
         '20', 
         hmac(<
               Expand(Expand(p_hs,
                             <'clienthts', 
                              h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                                 sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                             >,
                             '32'),
                      <'fin', '0'>, '32'), 
               h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                  sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
              >)
        >
  ),
  RMode( ~tid, $C, 'client', 'na' ),
  SessionKey( ~tid, $C, $S, <'auth', 'auth'>,
              <Expand(p_cats, <'adke_wk', '0'>, '32'), 
               Expand(p_sats, <'adke_wk', '0'>, '32')>
  )
  ]->
   [
   F_State_C4( ~tid, $C, $S, p_res_psk,
               <
                <<p_messages, '11', '0', pk(~ltkC)>, '15', 
                 sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>, 
                '20', 
                hmac(<
                      Expand(Expand(p_hs,
                                    <'clienthts', 
                                     h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                                        sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                         sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                     >)
               >,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na',
               p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               <'auth', 'auth'>, p_ems,
               Expand(p_ms,
                      <'rms', 
                       h(<
                          <<p_messages, '11', '0', pk(~ltkC)>, '15', 
                           sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>, 
                          '20', 
                          hmac(<
                                Expand(Expand(p_hs,
                                              <'clienthts', 
                                               h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                                                  sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>,
                                                       ~ltkC)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                                   sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                               >)
                         >)
                      >,
                      '32'),
               '0'
   ),
   Out( senc(<<'11', '0', pk(~ltkC)>, 
              <'15', sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)
              >, 
              '20', 
              hmac(<
                    Expand(Expand(p_hs,
                                  <'clienthts', 
                                   h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                                      sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                                  >,
                                  '32'),
                           <'fin', '0'>, '32'), 
                    h(<<p_messages, '11', '0', pk(~ltkC)>, '15', 
                       sign(<'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, ~ltkC)>)
                   >)
             >,
             p_hs_keyc)
   ),
   SendStream( ~tid, $C, $S, <'auth', 'auth'>,
               Expand(p_cats, <'adke_wk', '0'>, '32')
   ),
   RecvStream( ~tid, $C, $S, <'auth', 'auth'>,
               Expand(p_sats, <'adke_wk', '0'>, '32')
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) start_server:
   [ Fr( ~tid ) ]
  --[ Start( ~tid, $S, 'server' ), RIdentity( ~tid, $S, 'server', $S ) ]->
   [
   F_State_S0( ~tid, $S, $C, '0', '0', '0', '0', '0', $g, '0', '0', '0',
               '0', '0', '0', 'na', '0', '0', '0', '0', '0', '0', '0', '0', '0',
               <'0', '0'>, '0', '0', '0'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_hello:
   [
   In( <'1', '0x0303', new_nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
        <'10', $g1, $g2>, <'13', $sig_algs>, '40', $new_g, kempk($new_g, new_x)>
   ),
   Fr( ~new_ns ),
   F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp]
   ]
  --[ S0( ~tid ), Neq( $g1, $g2 ) ]->
   [
   F_State_S1( ~tid, $S, $C, p_res_psk,
               <p_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                <'43', '0x0304'>, <'10', $g1, $g2>, <'13', $sig_algs>, '40', $new_g, 
                kempk($new_g, new_x)>,
               new_nc, ~new_ns, $new_g, p_sg, p_hrr, p_x, p_y, kempk($new_g, new_x),
               p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats,
               p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) hello_retry_request:
   [
   F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, $p_sg,
               '0', p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp]
   ]
  --[ S1_retry( ~tid ), Neq( p_g, $p_sg ), Instance( ~tid, $S, 'server' )
  ]->
   [
   Out( <'6', '0x0303', '40', $p_sg> ),
   F_State_S0( ~tid, $S, $C, p_res_psk,
               <p_messages, '6', '0x0303', '40', $p_sg>, p_nc, p_ns, $p_sg, $p_sg,
               'hrr', p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_hello:
   [
   F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, $p_g, p_sg,
               p_hrr, p_x, p_y, kempk($p_g, some_x), p_gy, p_gxy, p_psk_ke_mode,
               p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems, p_rms, p_cert_req
   ),
   Fr( ~y )
   ]
  --[
  S1( ~tid ), Eq( $p_g, p_sg ), Neq( kempk($p_g, some_x), $p_g ),
  Neq( <kempk($p_g, some_x), ~y>, $p_g ), Instance( ~tid, $S, 'server' ),
  RNonces( ~tid, $S, 'server', <p_nc, p_ns> ),
  DHChal( $p_g, some_x, ~y, kempk($p_g, some_x),
          kemencaps($p_g, <kempk($p_g, some_x), ~y>, kempk($p_g, some_x)),
          <kempk($p_g, some_x), ~y>
  ),
  DH( ~tid, $S, ~y )
  ]->
   [
   F_State_S2a( ~tid, $S, $C, p_res_psk,
                <p_messages, '2', '0x0303', p_ns, $cipher_suite, <'13', $sig_algs>, 
                 '40', $p_g, 
                 kemencaps($p_g, <kempk($p_g, some_x), ~y>, kempk($p_g, some_x))>,
                p_nc, p_ns, $p_g, p_sg, p_hrr, p_x, ~y, kempk($p_g, some_x),
                kemencaps($p_g, <kempk($p_g, some_x), ~y>, kempk($p_g, some_x)),
                <kempk($p_g, some_x), ~y>, 'na', p_psk_id, p_edi,
                Extract(p_res_psk, '0'), p_hs, p_ms, p_cats, p_sats, p_hs_keyc,
                p_hs_keys, <'0', '0'>, p_ems, p_rms, p_cert_req
   ),
   DHExp( ~y, ~tid, $S ),
   Out( <'2', '0x0303', p_ns, $cipher_suite, <'13', $sig_algs>, '40', $p_g, 
         kemencaps($p_g, <kempk($p_g, some_x), ~y>, kempk($p_g, some_x))>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_gen_keys:
   [
   F_State_S2a( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                p_rms, p_cert_req
   )[no_precomp],
   DHExp( p_y, ~tid, $S )
   ]
  --[
  S2a( ~tid ), Extract( '0', Extract(p_gxy, p_es) ),
  Instance( ~tid, $S, 'server' ),
  RHS( ~tid, $S, 'server', Extract(p_gxy, p_es) ),
  RMS( ~tid, $S, 'server', Extract('0', Extract(p_gxy, p_es)) ),
  DeleteDH( ~tid, $S, p_y )
  ]->
   [
   F_State_S2b( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                Extract(p_gxy, p_es), Extract('0', Extract(p_gxy, p_es)), p_cats, p_sats,
                Expand(Expand(Extract(p_gxy, p_es), <'clienthts', h(p_messages)>, '32'),
                       <'kshe_wk', '0'>, '32'),
                Expand(Expand(Extract(p_gxy, p_es), <'serverhts', h(p_messages)>, '32'),
                       <'kshe_wk', '0'>, '32'),
                p_auth_status, p_ems, p_rms, p_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) encrypted_extensions:
   [
   F_State_S2b( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                p_rms, p_cert_req
   )[no_precomp]
   ]
  --[ S2b( ~tid ), Instance( ~tid, $S, 'server' ) ]->
   [
   F_State_S2c( ~tid, $S, $C, p_res_psk, <p_messages, '8', $exts>, p_nc,
                p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
                p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   ),
   Out( senc(<'8', $exts>, p_hs_keys) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) certificate_request:
   [
   F_State_S2c( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es, p_hs,
                p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
                p_cert_req
   )[no_precomp]
   ]
  --[
  S2c_req( ~tid ), Instance( ~tid, $S, 'server' ),
  RCertReqCtxt( ~tid, $S, 'server', '0' )
  ]->
   [
   F_State_S2d( ~tid, $S, $C, p_res_psk,
                <p_messages, '13', '0', $certificate_extensions>, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es, p_hs,
                p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
                '1'
   ),
   Out( senc(<'13', '0', $certificate_extensions>, p_hs_keys) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) skip_certificate_request:
   [
   F_State_S2c( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                p_rms, p_cert_req
   )[no_precomp]
   ]
  --[ S2c( ~tid ), Instance( ~tid, $S, 'server' ) ]->
   [
   F_State_S2d( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                p_rms, '0'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_auth:
   [
   F_State_S2d( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                p_rms, p_cert_req
   )[no_precomp],
   !Ltk( $S, ~ltkS )
   ]
  --[
  S2d( ~tid ), Instance( ~tid, $S, 'server' ), Eq( p_psk_ke_mode, 'na' ),
  UseLtk( ~ltkS,
          sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
  ),
  RTranscript( ~tid, $S, 'server',
               <
                <<p_messages, '11', '0', pk(~ltkS)>, '15', 
                 sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>, 
                '20', 
                hmac(<
                      Expand(Expand(p_hs,
                                    <'serverhts', 
                                     h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                        sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                         sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                     >)
               >
  )
  ]->
   [
   F_State_S3( ~tid, $S, $C, p_res_psk,
               <
                <<p_messages, '11', '0', pk(~ltkS)>, '15', 
                 sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>, 
                '20', 
                hmac(<
                      Expand(Expand(p_hs,
                                    <'serverhts', 
                                     h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                        sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                                    >,
                                    '32'),
                             <'fin', '0'>, '32'), 
                      h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                         sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                     >)
               >,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
               p_psk_id, p_edi, p_es, p_hs, p_ms,
               Expand(p_ms,
                      <'clientats', 
                       h(<
                          <<p_messages, '11', '0', pk(~ltkS)>, '15', 
                           sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>, 
                          '20', 
                          hmac(<
                                Expand(Expand(p_hs,
                                              <'serverhts', 
                                               h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                                  sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>,
                                                       ~ltkS)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                   sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                               >)
                         >)
                      >,
                      '32'),
               Expand(p_ms,
                      <'serverats', 
                       h(<
                          <<p_messages, '11', '0', pk(~ltkS)>, '15', 
                           sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>, 
                          '20', 
                          hmac(<
                                Expand(Expand(p_hs,
                                              <'serverhts', 
                                               h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                                  sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>,
                                                       ~ltkS)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                   sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                               >)
                         >)
                      >,
                      '32'),
               p_hs_keyc, p_hs_keys, <'auth', '0'>,
               Expand(p_ms,
                      <'ems', 
                       h(<
                          <<p_messages, '11', '0', pk(~ltkS)>, '15', 
                           sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>, 
                          '20', 
                          hmac(<
                                Expand(Expand(p_hs,
                                              <'serverhts', 
                                               h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                                  sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>,
                                                       ~ltkS)
                                                 >)
                                              >,
                                              '32'),
                                       <'fin', '0'>, '32'), 
                                h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                   sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                               >)
                         >)
                      >,
                      '32'),
               p_rms, p_cert_req
   ),
   SendStream( ~tid, $S, $C, <'auth', '0'>,
               Expand(Expand(p_ms,
                             <'serverats', 
                              h(<
                                 <<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                  sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>, 
                                 '20', 
                                 hmac(<
                                       Expand(Expand(p_hs,
                                                     <'serverhts', 
                                                      h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                                         sign(<'server_cv', 
                                                               h(<p_messages, '11', '0', pk(~ltkS)>)>,
                                                              ~ltkS)
                                                        >)
                                                     >,
                                                     '32'),
                                              <'fin', '0'>, '32'), 
                                       h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                          sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                                      >)
                                >)
                             >,
                             '32'),
                      <'adke_wk', '0'>, '32')
   ),
   Out( senc(<<'11', '0', pk(~ltkS)>, 
              <'15', sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)
              >, 
              '20', 
              hmac(<
                    Expand(Expand(p_hs,
                                  <'serverhts', 
                                   h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                                      sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                                  >,
                                  '32'),
                           <'fin', '0'>, '32'), 
                    h(<<p_messages, '11', '0', pk(~ltkS)>, '15', 
                       sign(<'server_cv', h(<p_messages, '11', '0', pk(~ltkS)>)>, ~ltkS)>)
                   >)
             >,
             p_hs_keys)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_auth:
   [
   F_State_S3( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, '0'
   )[no_precomp],
   In( senc(<'20', verify_data>, p_hs_keyc) )
   ]
  --[
  S3( ~tid ), Instance( ~tid, $S, 'server' ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(p_hs, <'clienthts', h(p_messages)>, '32'), <'fin', '0'>,
                   '32'), 
            h(p_messages)>)
  ),
  RMode( ~tid, $S, 'server', p_psk_ke_mode ),
  CIdentity( ~tid, $S, 'server', <$C, p_auth_status> ),
  CHS( ~tid, $S, 'server', p_hs ),
  RHSMS( ~tid, $S, 'server', <p_hs, p_ms> ),
  RRMS( ~tid, $S, 'server',
        <$C, Expand(p_ms, <'rms', h(<p_messages, '20', verify_data>)>, '32'), 
         p_messages, '20', verify_data>
  ),
  CTranscript( ~tid, $S, 'server', <p_messages, '20', verify_data> ),
  CNonces( ~tid, $S, 'server', <p_nc, p_ns> ),
  SessionKey( ~tid, $S, $C, p_auth_status,
              <Expand(p_sats, <'adke_wk', '0'>, '32'), 
               Expand(p_cats, <'adke_wk', '0'>, '32')>
  )
  ]->
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, <p_messages, '20', verify_data>,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
               p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems,
               Expand(p_ms, <'rms', h(<p_messages, '20', verify_data>)>, '32'), '0'
   ),
   RecvStream( ~tid, $S, $C, p_auth_status,
               Expand(p_cats, <'adke_wk', '0'>, '32')
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_auth_cert:
   [
   F_State_S3( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, '1'
   )[no_precomp],
   !Pk( $C, pk(~ltkC) ),
   SendStream( ~tid, $S, $C, p_auth_status,
               Expand(p_sats, <'adke_wk', '0'>, '32')
   ),
   In( senc(<<'11', '0', pk(~ltkC)>, <'15', signature>, '20', verify_data>,
            p_hs_keyc)
   )
   ]
  --[
  S3_cert( ~tid ), Instance( ~tid, $S, 'server' ),
  Eq( verify(signature,
             <'client_cv', h(<p_messages, '11', '0', pk(~ltkC)>)>, pk(~ltkC)),
      true
  ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(p_hs,
                          <'clienthts', h(<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>)>,
                          '32'),
                   <'fin', '0'>, '32'), 
            h(<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>)>)
  ),
  RMode( ~tid, $S, 'server', p_psk_ke_mode ),
  CIdentity( ~tid, $S, 'server', <$C, 'auth', 'auth'> ),
  CHS( ~tid, $S, 'server', p_hs ),
  RHSMS( ~tid, $S, 'server', <p_hs, p_ms> ),
  RRMS( ~tid, $S, 'server',
        <$C, 
         Expand(p_ms,
                <'rms', 
                 h(<<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                    verify_data>)
                >,
                '32'), 
         <<p_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', verify_data>
  ),
  CTranscript( ~tid, $S, 'server',
               <<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', verify_data
               >
  ),
  SessionKey( ~tid, $S, $C, <'auth', 'auth'>,
              <Expand(p_sats, <'adke_wk', '0'>, '32'), 
               Expand(p_cats, <'adke_wk', '0'>, '32')>
  ),
  CNonces( ~tid, $S, 'server', <p_nc, p_ns> )
  ]->
   [
   F_State_S4( ~tid, $S, $C, p_res_psk,
               <<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', verify_data
               >,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
               p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               <'auth', 'auth'>, p_ems,
               Expand(p_ms,
                      <'rms', 
                       h(<<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                          verify_data>)
                      >,
                      '32'),
               '0'
   ),
   SendStream( ~tid, $S, $C, <'auth', 'auth'>,
               Expand(p_sats, <'adke_wk', '0'>, '32')
   ),
   RecvStream( ~tid, $S, $C, <'auth', 'auth'>,
               Expand(p_cats, <'adke_wk', '0'>, '32')
   )
   ]

  // loop breaker: [2]
  /*
  rule (modulo AC) recv_client_auth_cert:
     [
     F_State_S3( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                 p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                 p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                 p_rms, '1'
     )[no_precomp],
     !Pk( $C, pk(~ltkC) ),
     SendStream( ~tid, $S, $C, p_auth_status,
                 Expand(p_sats, <'adke_wk', '0'>, '32')
     ),
     In( senc(<<'11', '0', pk(~ltkC)>, <'15', signature>, '20', verify_data>,
              p_hs_keyc)
     )
     ]
    --[
    S3_cert( ~tid ), Instance( ~tid, $S, 'server' ), Eq( z, true ),
    Eq( verify_data,
        hmac(<
              Expand(Expand(p_hs,
                            <'clienthts', h(<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>)>,
                            '32'),
                     <'fin', '0'>, '32'), 
              h(<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>)>)
    ),
    RMode( ~tid, $S, 'server', p_psk_ke_mode ),
    CIdentity( ~tid, $S, 'server', <$C, 'auth', 'auth'> ),
    CHS( ~tid, $S, 'server', p_hs ),
    RHSMS( ~tid, $S, 'server', <p_hs, p_ms> ),
    RRMS( ~tid, $S, 'server',
          <$C, 
           Expand(p_ms,
                  <'rms', 
                   h(<<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                      verify_data>)
                  >,
                  '32'), 
           <<p_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', verify_data>
    ),
    CTranscript( ~tid, $S, 'server',
                 <<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', verify_data
                 >
    ),
    SessionKey( ~tid, $S, $C, <'auth', 'auth'>,
                <Expand(p_sats, <'adke_wk', '0'>, '32'), 
                 Expand(p_cats, <'adke_wk', '0'>, '32')>
    ),
    CNonces( ~tid, $S, 'server', <p_nc, p_ns> )
    ]->
     [
     F_State_S4( ~tid, $S, $C, p_res_psk,
                 <<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', verify_data
                 >,
                 p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
                 p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                 <'auth', 'auth'>, p_ems,
                 Expand(p_ms,
                        <'rms', 
                         h(<<<p_messages, '11', '0', pk(~ltkC)>, '15', signature>, '20', 
                            verify_data>)
                        >,
                        '32'),
                 '0'
     ),
     SendStream( ~tid, $S, $C, <'auth', 'auth'>,
                 Expand(p_sats, <'adke_wk', '0'>, '32')
     ),
     RecvStream( ~tid, $S, $C, <'auth', 'auth'>,
                 Expand(p_cats, <'adke_wk', '0'>, '32')
     )
     ]
    variants (modulo AC)
    1. ~ltkC = ~ltkC.59
       p_messages
             = p_messages.74
       signature
             = sign(<'client_cv', h(<p_messages.74, '11', '0', pk(~ltkC.59)>)>,
                    ~ltkC.59)
       z     = true
    
    2. ~ltkC = ~ltkC.71
       p_messages
             = p_messages.86
       signature
             = signature.98
       z     = verify(signature.98,
                      <'client_cv', h(<p_messages.86, '11', '0', pk(~ltkC.71)>)>, pk(~ltkC.71))
    // loop breaker: [2]
  */

rule (modulo E) client_hello_psk:
   [
   Fr( ~nc ), Fr( ~x ),
   !ClientPSK( $C, $S, p_res_psk, p_auth_status,
               <'4', $ticket_lifetime, ticket_age_add, ticket, '46', 
                $max_early_data_size>,
               psk_type
   )
   ]
  --[
  C0_PSK( ~nc ), Start( ~nc, $C, 'client' ),
  RPSK( ~nc, $C, 'client', <$S, p_res_psk, p_auth_status> ),
  Neq( p_res_psk, '0' ), DH( ~nc, $C, ~x )
  ]->
   [
   F_State_C1( ~nc, $C, $S, p_res_psk,
               <'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
                <'10', $g1, $g2>, <'40', $g1, kempk($g1, ~x)>, <'45', '0', '1'>, 
                <'42', '0'>, '41', <ticket, mask(ticket_age_add, $ticket_age)>, 
                hmac(<
                      Expand(Expand(Extract(p_res_psk, '0'), <psk_type, 'pbk'>, '32'),
                             <'0', '0'>, '32'), 
                      h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
                         <'10', $g1, $g2>, <'40', $g1, kempk($g1, ~x)>, <'45', '0', '1'>, 
                         <'42', '0'>, '41', <ticket, mask(ticket_age_add, $ticket_age)>, '0'>)
                     >)
               >,
               ~nc, '0', $g1, <$g1, $g2>, '0', ~x, '0', kempk($g1, ~x), '0', '0',
               <'0', '1'>, ticket, <'42', '0'>, Extract(p_res_psk, '0'), '0', '0', '0',
               '0', '0', '0', p_auth_status, '0', '0', '0'
   ),
   F_CachePSK( ~nc, $S, p_res_psk, p_auth_status,
               <'4', $ticket_lifetime, ticket_age_add, ticket, '46', 
                $max_early_data_size>,
               psk_type
   ),
   EarlySendStream( ~nc, $C, $S, p_auth_status,
                    Expand(Expand(Extract(p_res_psk, '0'),
                                  <'cets', 
                                   h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
                                      <'10', $g1, $g2>, <'40', $g1, kempk($g1, ~x)>, <'45', '0', '1'>, 
                                      <'42', '0'>, '41', <ticket, mask(ticket_age_add, $ticket_age)>, 
                                      hmac(<
                                            Expand(Expand(Extract(p_res_psk, '0'), <psk_type, 'pbk'>, '32'),
                                                   <'0', '0'>, '32'), 
                                            h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', 
                                               <'43', '0x0304'>, <'10', $g1, $g2>, 
                                               <'40', $g1, kempk($g1, ~x)>, <'45', '0', '1'>, <'42', '0'>, 
                                               '41', <ticket, mask(ticket_age_add, $ticket_age)>, '0'>)
                                           >)
                                     >)
                                  >,
                                  '32'),
                           <'eadke_wk', '0'>, '32'),
                    <'42', '0'>
   ),
   DHExp( ~x, ~nc, $C ),
   Out( <'1', '0x0303', ~nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
         <'10', $g1, $g2>, <'40', $g1, kempk($g1, ~x)>, <'45', '0', '1'>, 
         <'42', '0'>, '41', <ticket, mask(ticket_age_add, $ticket_age)>, 
         hmac(<
               Expand(Expand(Extract(p_res_psk, '0'), <psk_type, 'pbk'>, '32'),
                      <'0', '0'>, '32'), 
               h(<'0', '1', '0x0303', ~nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
                  <'10', $g1, $g2>, <'40', $g1, kempk($g1, ~x)>, <'45', '0', '1'>, 
                  <'42', '0'>, '41', <ticket, mask(ticket_age_add, $ticket_age)>, '0'>)
              >)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_hello_retry_request_psk:
   [
   F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g1,
               <$g1, $g2>, '0', p_x, p_y, p_gx, p_gy, p_gxy, <'0', '1'>, p_psk_id,
               p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
               p_auth_status, p_ems, p_rms, p_cert_req
   )[no_precomp],
   F_CachePSK( ~tid, $S, p_res_psk, p_auth_status,
               <'4', $ticket_lifetime, ticket_age_add, ticket, '46', 
                $max_early_data_size>,
               psk_type
   ),
   Fr( ~new_nc ), Fr( ~new_x ), DHExp( p_x, ~tid, $C ),
   In( <'6', '0x0303', '40', $g2> )
   ]
  --[
  C1_retry_PSK( ~tid ), Neq( $g1, $g2 ), Instance( ~tid, $C, 'client' ),
  RPSK( ~tid, $C, 'client', <$S, p_res_psk, p_auth_status> ),
  DeleteDH( ~tid, $C, p_x ), DH( ~tid, $C, ~new_x )
  ]->
   [
   Out( <'1', '0x0303', ~new_nc, '0', $cipher_suites, '0', 
         <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $g2, kempk($g2, ~new_x)>, 
         <'45', '0', '1'>, '0', '41', <ticket, mask(ticket_age_add, '1')>, 
         hmac(<
               Expand(Expand(Extract(p_res_psk, '0'), <psk_type, 'pbk'>, '32'),
                      <'0', '0'>, '32'), 
               h(<<p_messages, '6', '0x0303', '40', $g2>, '1', '0x0303', ~new_nc, '0', 
                  $cipher_suites, '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                  <'40', $g2, kempk($g2, ~new_x)>, <'45', '0', '1'>, '0', '41', 
                  <ticket, mask(ticket_age_add, '1')>, '0'>)
              >)
        >
   ),
   DHExp( ~new_x, ~tid, $C ),
   F_State_C1( ~tid, $C, $S, p_res_psk,
               <<p_messages, '6', '0x0303', '40', $g2>, '1', '0x0303', ~new_nc, '0', 
                $cipher_suites, '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                <'40', $g2, kempk($g2, ~new_x)>, <'45', '0', '1'>, '0', '41', 
                <ticket, mask(ticket_age_add, '1')>, 
                hmac(<
                      Expand(Expand(Extract(p_res_psk, '0'), <psk_type, 'pbk'>, '32'),
                             <'0', '0'>, '32'), 
                      h(<<p_messages, '6', '0x0303', '40', $g2>, '1', '0x0303', ~new_nc, '0', 
                         $cipher_suites, '0', <'43', '0x0304'>, <'10', $g1, $g2>, 
                         <'40', $g2, kempk($g2, ~new_x)>, <'45', '0', '1'>, '0', '41', 
                         <ticket, mask(ticket_age_add, '1')>, '0'>)
                     >)
               >,
               ~new_nc, p_ns, $g2, <$g1, $g2>, 'hrr', ~new_x, p_y, kempk($g2, ~new_x),
               p_gy, p_gxy, <'0', '1'>, ticket, '0', Extract(p_res_psk, '0'), p_hs,
               p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
               p_cert_req
   )
   ]

  // loop breaker: [4]
  /* has exactly the trivial AC variant */

rule (modulo E) recv_server_hello_psk_dhe:
   [
   F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g, p_sg,
               p_hrr, ~x, p_y, p_gx, p_gy, p_gxy, <'0', '1'>, ~ticket, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   ),
   In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
        <'40', $g, kemencaps($g, <p_gx, new_y>, p_gx)>, <'41', '0'>, p_edi>
   )
   ]
  --[
  C1_PSK_DHE( ~tid ), Neq( kemencaps($g, <p_gx, new_y>, p_gx), $g ),
  Instance( ~tid, $C, 'client' ),
  DHChal( $g, ~x, new_y, p_gx, kemencaps($g, <p_gx, new_y>, p_gx),
          kemdecaps($g, kemencaps($g, <p_gx, new_y>, p_gx), ~x)
  ),
  RNonces( ~tid, $C, 'client', <p_nc, new_ns> )
  ]->
   [
   F_State_C2a( ~tid, $C, $S, p_res_psk,
                <p_messages, '2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
                 <'40', $g, kemencaps($g, <p_gx, new_y>, p_gx)>, <'41', '0'>, p_edi>,
                p_nc, new_ns, $g, p_sg, p_hrr, ~x, p_y, p_gx,
                kemencaps($g, <p_gx, new_y>, p_gx),
                kemdecaps($g, kemencaps($g, <p_gx, new_y>, p_gx), ~x), '1', ~ticket,
                p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )
   ]

  /*
  rule (modulo AC) recv_server_hello_psk_dhe:
     [
     F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g, p_sg,
                 p_hrr, ~x, p_y, p_gx, p_gy, p_gxy, <'0', '1'>, ~ticket, p_edi, p_es,
                 p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                 p_rms, p_cert_req
     ),
     In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
          <'40', $g, kemencaps($g, <p_gx, new_y>, p_gx)>, <'41', '0'>, p_edi>
     )
     ]
    --[
    C1_PSK_DHE( ~tid ), Neq( kemencaps($g, <p_gx, new_y>, p_gx), $g ),
    Instance( ~tid, $C, 'client' ),
    DHChal( $g, ~x, new_y, p_gx, kemencaps($g, <p_gx, new_y>, p_gx), z ),
    RNonces( ~tid, $C, 'client', <p_nc, new_ns> )
    ]->
     [
     F_State_C2a( ~tid, $C, $S, p_res_psk,
                  <p_messages, '2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
                   <'40', $g, kemencaps($g, <p_gx, new_y>, p_gx)>, <'41', '0'>, p_edi>,
                  p_nc, new_ns, $g, p_sg, p_hrr, ~x, p_y, p_gx,
                  kemencaps($g, <p_gx, new_y>, p_gx), z, '1', ~ticket, p_edi, p_es, p_hs,
                  p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
                  p_cert_req
     )
     ]
    variants (modulo AC)
    1. $g    = $g.48
       ~x    = ~x.52
       new_y = new_y.54
       p_gx  = kempk($g.48, ~x.52)
       z     = <kempk($g.48, ~x.52), new_y.54>
    
    2. $g    = $g.55
       ~x    = ~x.59
       new_y = new_y.61
       p_gx  = p_gx.68
       z     = kemdecaps($g.55, kemencaps($g.55, <p_gx.68, new_y.61>, p_gx.68),
                         ~x.59)
  */

rule (modulo E) recv_server_hello_psk:
   [
   F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, <'0', '1'>, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   In( <'2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
        <'41', '0'>, p_edi>
   )
   ]
  --[
  C1_PSK( ~tid ), Instance( ~tid, $C, 'client' ),
  RNonces( ~tid, $C, 'client', <p_nc, new_ns> )
  ]->
   [
   F_State_C2a( ~tid, $C, $S, p_res_psk,
                <p_messages, '2', '0x0303', new_ns, $cipher_suite, <'13', $sig_algs>, 
                 <'41', '0'>, p_edi>,
                p_nc, new_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, '0',
                p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                p_auth_status, p_ems, p_rms, p_cert_req
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_server_auth_psk:
   [
   F_State_C2d( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                p_rms, p_cert_req
   )[no_precomp],
   In( senc(<'20', verify_data>, p_hs_keys) )
   ]
  --[
  C2d_PSK( ~tid ), Neq( p_psk_ke_mode, 'na' ),
  Instance( ~tid, $C, 'client' ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(p_hs, <'serverhts', h(p_messages)>, '32'), <'fin', '0'>,
                   '32'), 
            h(p_messages)>)
  ),
  RMode( ~tid, $C, 'client', p_psk_ke_mode ),
  CIdentity( ~tid, $C, 'client', <$S, p_auth_status> ),
  CHS( ~tid, $C, 'client', p_hs ),
  CNonces( ~tid, $C, 'client', <p_nc, p_ns> ),
  CTranscript( ~tid, $C, 'client', <p_messages, '20', verify_data> )
  ]->
   [
   F_State_C3( ~tid, $C, $S, p_res_psk, <p_messages, '20', verify_data>,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
               p_psk_id, p_edi, p_es, p_hs, p_ms,
               Expand(p_ms, <'clientats', h(<p_messages, '20', verify_data>)>, '32'),
               Expand(p_ms, <'serverats', h(<p_messages, '20', verify_data>)>, '32'),
               p_hs_keyc, p_hs_keys, p_auth_status,
               Expand(p_ms, <'ems', h(<p_messages, '20', verify_data>)>, '32'), p_rms,
               p_cert_req
   ),
   RecvStream( ~tid, $C, $S, p_auth_status,
               Expand(Expand(p_ms, <'serverats', h(<p_messages, '20', verify_data>)>,
                             '32'),
                      <'adke_wk', '0'>, '32')
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_hello_psk:
   [
   F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   In( <'1', '0x0303', new_nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
        <'10', $g1, $g2>, <'40', $new_g, $new_g^new_x>, <'45', '0', '1'>, 
        new_edi, '41', <~ticket, obfuscated_ticket_age>, binder>
   ),
   Fr( ~ns ),
   !ServerPSK( $S, $C, psk_res_psk, psk_auth_status,
               <'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
                $max_early_data_size>,
               psk_type
   )
   ]
  --[
  S0_PSK( ~tid ), Neq( $g1, $g2 ),
  Eq( unmask(obfuscated_ticket_age, ~ticket_age_add), '1' ),
  Eq( hmac(<
            Expand(Expand(Extract(psk_res_psk, '0'), <psk_type, 'pbk'>, '32'),
                   <'0', '0'>, '32'), 
            h(<p_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
               <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $new_g, $new_g^new_x>, 
               <'45', '0', '1'>, new_edi, '41', <~ticket, obfuscated_ticket_age>, '0'>)
           >),
      binder
  ),
  RPSK( ~tid, $S, 'server', <$C, psk_res_psk, psk_auth_status> ),
  Neq( psk_res_psk, '0' )
  ]->
   [
   F_State_S1( ~tid, $S, $C, psk_res_psk,
               <p_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $new_g, $new_g^new_x>, 
                <'45', '0', '1'>, new_edi, '41', <~ticket, obfuscated_ticket_age>, binder
               >,
               new_nc, ~ns, $new_g, p_sg, p_hrr, p_x, p_y, $new_g^new_x, p_gy, p_gxy,
               <'0', '1'>, ~ticket, new_edi, Extract(psk_res_psk, '0'), p_hs, p_ms,
               p_cats, p_sats, p_hs_keyc, p_hs_keys, psk_auth_status, p_ems, p_rms,
               p_cert_req
   ),
   EarlyRecvStream( ~tid, $S, $C, psk_auth_status,
                    Expand(Expand(Extract(psk_res_psk, '0'),
                                  <'cets', 
                                   h(<p_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                                      <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $new_g, $new_g^new_x>, 
                                      <'45', '0', '1'>, new_edi, '41', <~ticket, obfuscated_ticket_age>, 
                                      binder>)
                                  >,
                                  '32'),
                           <'eadke_wk', '0'>, '32'),
                    new_edi
   )
   ]

  /*
  rule (modulo AC) recv_client_hello_psk:
     [
     F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                 p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                 p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                 p_rms, p_cert_req
     )[no_precomp],
     In( <'1', '0x0303', new_nc, '0', $cipher_suites, '0', <'43', '0x0304'>, 
          <'10', $g1, $g2>, <'40', $new_g, z>, <'45', '0', '1'>, new_edi, '41', 
          <~ticket, obfuscated_ticket_age>, binder>
     ),
     Fr( ~ns ),
     !ServerPSK( $S, $C, psk_res_psk, psk_auth_status,
                 <'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
                  $max_early_data_size>,
                 psk_type
     )
     ]
    --[
    S0_PSK( ~tid ), Neq( $g1, $g2 ), Eq( z.1, '1' ),
    Eq( hmac(<
              Expand(Expand(Extract(psk_res_psk, '0'), <psk_type, 'pbk'>, '32'),
                     <'0', '0'>, '32'), 
              h(<p_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                 <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $new_g, z>, <'45', '0', '1'>, 
                 new_edi, '41', <~ticket, obfuscated_ticket_age>, '0'>)
             >),
        binder
    ),
    RPSK( ~tid, $S, 'server', <$C, psk_res_psk, psk_auth_status> ),
    Neq( psk_res_psk, '0' )
    ]->
     [
     F_State_S1( ~tid, $S, $C, psk_res_psk,
                 <p_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                  <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $new_g, z>, <'45', '0', '1'>, 
                  new_edi, '41', <~ticket, obfuscated_ticket_age>, binder>,
                 new_nc, ~ns, $new_g, p_sg, p_hrr, p_x, p_y, z, p_gy, p_gxy, <'0', '1'>,
                 ~ticket, new_edi, Extract(psk_res_psk, '0'), p_hs, p_ms, p_cats, p_sats,
                 p_hs_keyc, p_hs_keys, psk_auth_status, p_ems, p_rms, p_cert_req
     ),
     EarlyRecvStream( ~tid, $S, $C, psk_auth_status,
                      Expand(Expand(Extract(psk_res_psk, '0'),
                                    <'cets', 
                                     h(<p_messages, '1', '0x0303', new_nc, '0', $cipher_suites, '0', 
                                        <'43', '0x0304'>, <'10', $g1, $g2>, <'40', $new_g, z>, 
                                        <'45', '0', '1'>, new_edi, '41', <~ticket, obfuscated_ticket_age>, 
                                        binder>)
                                    >,
                                    '32'),
                             <'eadke_wk', '0'>, '32'),
                      new_edi
     )
     ]
    variants (modulo AC)
    1. $new_g
             = $new_g.74
       ~ticket_age_add
             = ~ticket_age_add.78
       obfuscated_ticket_age
             = obfuscated_ticket_age.84
       z     = $new_g.74
       z.1   = unmask(obfuscated_ticket_age.84, ~ticket_age_add.78)
    
    2. $new_g
             = $new_g.119
       ~ticket_age_add
             = ~ticket_age_add.123
       obfuscated_ticket_age
             = mask(~ticket_age_add.123, z.174)
       z     = $new_g.119
       z.1   = z.174
    
    3. $new_g
             = $new_g.119
       ~ticket_age_add
             = ~ticket_age_add.123
       obfuscated_ticket_age
             = mask(z.174, ~ticket_age_add.123)
       z     = $new_g.119
       z.1   = z.174
    
    4. $new_g
             = $new_g.934
       ~ticket_age_add
             = ~ticket_age_add.938
       obfuscated_ticket_age
             = obfuscated_ticket_age.944
       z     = $new_g.934^new_x.1860
       z.1   = unmask(obfuscated_ticket_age.944, ~ticket_age_add.938)
    
    5. $new_g
             = $new_g.941
       ~ticket_age_add
             = ~ticket_age_add.945
       obfuscated_ticket_age
             = mask(~ticket_age_add.945, z.996)
       z     = $new_g.941^new_x.1874
       z.1   = z.996
    
    6. $new_g
             = $new_g.941
       ~ticket_age_add
             = ~ticket_age_add.945
       obfuscated_ticket_age
             = mask(z.996, ~ticket_age_add.945)
       z     = $new_g.941^new_x.1874
       z.1   = z.996
  */

rule (modulo E) server_hello_psk_dhe:
   [
   F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, ~ns, $g, p_sg,
               p_hrr, p_x, p_y, $g^some_x, p_gy, p_gxy, <'0', '1'>, ~ticket, p_edi,
               p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
               p_ems, p_rms, p_cert_req
   ),
   Fr( ~y )
   ]
  --[
  S1_PSK_DHE( ~tid ), Neq( $g^some_x, $g ), Neq( p_x, inv(~y) ),
  Instance( ~tid, $S, 'server' ),
  DHChal( $g, some_x, ~y, $g^some_x, $g^~y, $g^some_x^~y ),
  RNonces( ~tid, $S, 'server', <p_nc, ~ns> ), DH( ~tid, $S, ~y )
  ]->
   [
   F_State_S2a( ~tid, $S, $C, p_res_psk,
                <p_messages, '2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
                 <'40', $g, $g^~y>, <'41', '0'>, p_edi>,
                p_nc, ~ns, $g, p_sg, p_hrr, p_x, ~y, $g^some_x, $g^~y, $g^some_x^~y, '1',
                ~ticket, p_edi, Extract(p_res_psk, '0'), p_hs, p_ms, p_cats, p_sats,
                p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   ),
   DHExp( ~y, ~tid, $S ),
   Out( <'2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
         <'40', $g, $g^~y>, <'41', '0'>, p_edi>
   )
   ]

  /*
  rule (modulo AC) server_hello_psk_dhe:
     [
     F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, ~ns, $g, p_sg,
                 p_hrr, p_x, p_y, z, p_gy, p_gxy, <'0', '1'>, ~ticket, p_edi, p_es, p_hs,
                 p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms,
                 p_cert_req
     ),
     Fr( ~y )
     ]
    --[
    S1_PSK_DHE( ~tid ), Neq( z, $g ), Neq( p_x, inv(~y) ),
    Instance( ~tid, $S, 'server' ), DHChal( $g, some_x, ~y, z, $g^~y, z.1 ),
    RNonces( ~tid, $S, 'server', <p_nc, ~ns> ), DH( ~tid, $S, ~y )
    ]->
     [
     F_State_S2a( ~tid, $S, $C, p_res_psk,
                  <p_messages, '2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
                   <'40', $g, $g^~y>, <'41', '0'>, p_edi>,
                  p_nc, ~ns, $g, p_sg, p_hrr, p_x, ~y, z, $g^~y, z.1, '1', ~ticket, p_edi,
                  Extract(p_res_psk, '0'), p_hs, p_ms, p_cats, p_sats, p_hs_keyc,
                  p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
     ),
     DHExp( ~y, ~tid, $S ),
     Out( <'2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
           <'40', $g, $g^~y>, <'41', '0'>, p_edi>
     )
     ]
    variants (modulo AC)
    1. $g    = $g.48
       ~y    = ~y.53
       some_x
             = inv(~y.53)
       z     = $g.48^inv(~y.53)
       z.1   = $g.48
    
    2. $g    = $g.48
       ~y    = ~y.53
       some_x
             = one
       z     = $g.48
       z.1   = $g.48^~y.53
    
    3. $g    = $g.70
       ~y    = ~y.75
       some_x
             = some_x.97
       z     = $g.70^some_x.97
       z.1   = $g.70^(~y.75*some_x.97)
    
    4. $g    = $g.663
       ~y    = ~y.668
       some_x
             = inv((~y.668*x.1321))
       z     = $g.663^inv((~y.668*x.1321))
       z.1   = $g.663^inv(x.1321)
    
    5. $g    = $g.663
       ~y    = ~y.668
       some_x
             = (x.1321*inv(~y.668))
       z     = $g.663^(x.1321*inv(~y.668))
       z.1   = $g.663^x.1321
    
    6. $g    = $g.664
       ~y    = ~y.669
       some_x
             = (x.1322*inv((~y.669*x.1323)))
       z     = $g.664^(x.1322*inv((~y.669*x.1323)))
       z.1   = $g.664^(x.1322*inv(x.1323))
  */

rule (modulo E) server_hello_psk:
   [
   F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, ~ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, <'0', '1'>, ~ticket, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   ),
   Fr( ~y_ignored )
   ]
  --[
  S1_PSK( ~tid ), Instance( ~tid, $S, 'server' ),
  RNonces( ~tid, $S, 'server', <p_nc, ~ns> ), DH( ~tid, $S, ~y_ignored )
  ]->
   [
   F_State_S2a( ~tid, $S, $C, p_res_psk,
                <p_messages, '2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, 
                 <'41', '0'>, p_edi>,
                p_nc, ~ns, p_g, p_sg, p_hrr, p_x, ~y_ignored, p_gx, p_gy, p_gxy, '0',
                ~ticket, p_edi, Extract(p_res_psk, '0'), p_hs, p_ms, p_cats, p_sats,
                p_hs_keyc, p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   ),
   DHExp( ~y_ignored, ~tid, $S ),
   Out( <'2', '0x0303', ~ns, $cipher_suite, <'13', $sig_algs>, <'41', '0'>, 
         p_edi>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_auth_psk:
   [
   F_State_S2d( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                p_rms, p_cert_req
   )[no_precomp]
   ]
  --[
  S2d_PSK( ~tid ), Neq( p_psk_ke_mode, 'na' ),
  Instance( ~tid, $S, 'server' ),
  RTranscript( ~tid, $S, 'server',
               <p_messages, '20', 
                hmac(<
                      Expand(Expand(p_hs, <'serverhts', h(p_messages)>, '32'), <'fin', '0'>,
                             '32'), 
                      h(p_messages)>)
               >
  )
  ]->
   [
   F_State_S3( ~tid, $S, $C, p_res_psk,
               <p_messages, '20', 
                hmac(<
                      Expand(Expand(p_hs, <'serverhts', h(p_messages)>, '32'), <'fin', '0'>,
                             '32'), 
                      h(p_messages)>)
               >,
               p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode,
               p_psk_id, p_edi, p_es, p_hs, p_ms,
               Expand(p_ms,
                      <'clientats', 
                       h(<p_messages, '20', 
                          hmac(<
                                Expand(Expand(p_hs, <'serverhts', h(p_messages)>, '32'), <'fin', '0'>,
                                       '32'), 
                                h(p_messages)>)
                         >)
                      >,
                      '32'),
               Expand(p_ms,
                      <'serverats', 
                       h(<p_messages, '20', 
                          hmac(<
                                Expand(Expand(p_hs, <'serverhts', h(p_messages)>, '32'), <'fin', '0'>,
                                       '32'), 
                                h(p_messages)>)
                         >)
                      >,
                      '32'),
               p_hs_keyc, p_hs_keys, p_auth_status,
               Expand(p_ms,
                      <'ems', 
                       h(<p_messages, '20', 
                          hmac(<
                                Expand(Expand(p_hs, <'serverhts', h(p_messages)>, '32'), <'fin', '0'>,
                                       '32'), 
                                h(p_messages)>)
                         >)
                      >,
                      '32'),
               p_rms, p_cert_req
   ),
   SendStream( ~tid, $S, $C, p_auth_status,
               Expand(Expand(p_ms,
                             <'serverats', 
                              h(<p_messages, '20', 
                                 hmac(<
                                       Expand(Expand(p_hs, <'serverhts', h(p_messages)>, '32'), <'fin', '0'>,
                                              '32'), 
                                       h(p_messages)>)
                                >)
                             >,
                             '32'),
                      <'adke_wk', '0'>, '32')
   ),
   Out( senc(<'20', 
              hmac(<
                    Expand(Expand(p_hs, <'serverhts', h(p_messages)>, '32'), <'fin', '0'>,
                           '32'), 
                    h(p_messages)>)
             >,
             p_hs_keys)
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) send:
   [
   SendStream( ~tid, $actor, $peer, auth_status, app_key_out ), Fr( ~data )
   ]
  --[ Send( ~tid ), SendData( ~tid, $actor, $peer, auth_status, ~data ) ]->
   [
   SendStream( ~tid, $actor, $peer, auth_status, app_key_out ),
   Out( senc(<~data, '23'>, app_key_out) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) recv:
   [
   RecvStream( ~tid, $actor, $peer, auth_status, app_key_in ),
   In( senc(<data, '23'>, app_key_in) )
   ]
  --[ Recv( ~tid ), RecvData( ~tid, $actor, $peer, auth_status, data ) ]->
   [ RecvStream( ~tid, $actor, $peer, auth_status, app_key_in ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) end_early_data:
   [ EarlySendStream( tid, $C, $S, auth_status, ead_keyc, <'42', '0'> ) ]
  --[ C_EndZeroRTT( tid ) ]->
   [ Out( senc(<'1', '21'>, ead_keyc) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) recv_end_early_data:
   [
   EarlyRecvStream( tid, $S, $C, auth_status, ead_keyc, <'42', '0'> ),
   In( senc(<'1', '21'>, ead_keyc) )
   ]
  --[ S_RecvEndZeroRTT( tid ) ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) send_early_data:
   [
   EarlySendStream( tid, $C, $S, auth_status, ead_keyc, <'42', '0'> ),
   Fr( ~data )
   ]
  --[ C_SendZeroRTT( tid ) ]->
   [
   EarlySendStream( tid, $C, $S, auth_status, ead_keyc, <'42', '0'> ),
   Out( senc(<~data, '23'>, ead_keyc) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) recv_early_data:
   [
   EarlyRecvStream( tid, $S, $C, auth_status, ead_keyc, <'42', '0'> ),
   In( senc(<data, '23'>, ead_keyc) )
   ]
  --[ S_RecvZeroRTT( tid ) ]->
   [ EarlyRecvStream( tid, $S, $C, auth_status, ead_keyc, <'42', '0'> ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) out_of_band_psk:
   [ Fr( ~ticket ), Fr( ~res_psk ), Fr( ~ticket_age_add ) ]
  --[
  GenPSK( $S, 'server' ), GenPSK( $C, 'client' ),
  FreshPSK( ~ticket, ~res_psk )
  ]->
   [
   !ClientPSK( $C, $S, ~res_psk, <'oob_auth', 'oob_auth'>,
               <'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
                $max_early_data_size>,
               'ext'
   ),
   !ServerPSK( $S, $C, ~res_psk, <'oob_auth', 'oob_auth'>,
               <'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
                $max_early_data_size>,
               'ext'
   ),
   F_SecretPSK( $S, ~res_psk ), F_SecretPSK( $C, ~res_psk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_session_ticket:
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               Expand(ms, <'rms', h(messages)>, '32'), p_cert_req
   )[no_precomp],
   SendStream( ~tid, $S, $C, p_auth_status, app_keys ), Fr( ~ticket ),
   Fr( ~ticket_age_add )
   ]
  --[
  S4_NST( ~tid ), Instance( ~tid, $S, 'server' ),
  RPostHS( ~tid, $S, 'server',
           <p_hs, Expand(ms, <'rms', h(messages)>, '32'), $C, p_auth_status, 
            p_messages>
  ),
  RNST( ~tid, $S, 'server', <~ticket, ~ticket_age_add> )
  ]->
   [
   F_State_S4( ~tid, $S, $C, Expand(ms, <'rms', h(messages)>, '32'),
               p_messages, p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy,
               p_psk_ke_mode, p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats,
               p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               Expand(ms, <'rms', h(messages)>, '32'), p_cert_req
   ),
   SendStream( ~tid, $S, $C, p_auth_status, app_keys ),
   !ServerPSK( $S, $C, Expand(ms, <'rms', h(messages)>, '32'),
               p_auth_status,
               <'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
                $max_early_data_size>,
               'res'
   ),
   F_SecretPSK( $S, Expand(ms, <'rms', h(messages)>, '32') ),
   Out( senc(<'4', $ticket_lifetime, ~ticket_age_add, ~ticket, '46', 
              $max_early_data_size>,
             app_keys)
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) recv_new_session_ticket:
   [
   F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               Expand(ms, <'rms', h(messages)>, '32'), p_cert_req
   )[no_precomp],
   RecvStream( ~tid, $C, $S, p_auth_status, app_keys ),
   In( senc(<'4', $ticket_lifetime, ticket_age_add, ticket, '46', 
             $max_early_data_size>,
            app_keys)
   )
   ]
  --[
  C4_NST( ~tid ), Instance( ~tid, $C, 'client' ),
  RPostHS( ~tid, $C, 'client',
           <p_hs, Expand(ms, <'rms', h(messages)>, '32'), $S, p_auth_status, 
            p_messages>
  )
  ]->
   [
   F_State_C4( ~tid, $C, $S, Expand(ms, <'rms', h(messages)>, '32'),
               p_messages, p_nc, p_ns, p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy,
               p_psk_ke_mode, p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats,
               p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               Expand(ms, <'rms', h(messages)>, '32'), p_cert_req
   ),
   RecvStream( ~tid, $C, $S, p_auth_status, app_keys ),
   !ClientPSK( $C, $S, Expand(ms, <'rms', h(messages)>, '32'),
               p_auth_status,
               <'4', $ticket_lifetime, ticket_age_add, ticket, '46', 
                $max_early_data_size>,
               'res'
   ),
   F_SecretPSK( $C, Expand(ms, <'rms', h(messages)>, '32') )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) certificate_request_post:
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   SendStream( ~tid, $S, $C, p_auth_status, app_keys ), Fr( ~cert_req_ctxt )
   ]
  --[
  S4_req( ~tid ), Instance( ~tid, $S, 'server' ),
  RCertReqCtxt( ~tid, $S, 'server', ~cert_req_ctxt ),
  RPostHS( ~tid, $S, 'server', <p_hs, p_rms, $C, p_auth_status, p_messages>
  )
  ]->
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   ),
   SendStream( ~tid, $S, $C, p_auth_status, app_keys ),
   L_ServerCertReq( ~tid, $S, $C, ~cert_req_ctxt ),
   Out( senc(<'13', ~cert_req_ctxt, $certificate_extensions>, app_keys) )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) recv_certificate_request_post:
   [
   F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   RecvStream( ~tid, $C, $S, p_auth_status, app_keys ),
   In( senc(<'13', certificate_request_context, $certificate_extensions>,
            app_keys)
   )
   ]
  --[
  C4_req( ~tid ), Neq( certificate_request_context, '0' ),
  Instance( ~tid, $C, 'client' ),
  RPostHS( ~tid, $C, 'client', <p_hs, p_rms, $S, p_auth_status, p_messages>
  )
  ]->
   [
   F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   ),
   RecvStream( ~tid, $C, $S, p_auth_status, app_keys ),
   L_ClientCertReq( ~tid, $C, $S, certificate_request_context )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) client_auth_post:
   [
   F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, <p_cas, p_sas>, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   SendStream( ~tid, $C, $S, <p_cas, p_sas>, app_keyc ), !Ltk( $C, ~ltkC ),
   L_ClientCertReq( ~tid, $C, $S, certificate_request_context )
   ]
  --[
  C4_cert( ~tid ), Instance( ~tid, $C, 'client' ),
  Neq( certificate_request_context, '0' ),
  UseLtk( ~ltkC,
          sign(<'client_cv', 
                h(<p_messages, '13', certificate_request_context, $certificate_extensions
                  >)
               >,
               ~ltkC)
  ),
  RTranscriptPost( ~tid, $C, 'client',
                   <p_messages, certificate_request_context>
  ),
  RPostHS( ~tid, $C, 'client',
           <p_hs, p_rms, $S, <'auth', p_sas>, p_messages>
  )
  ]->
   [
   F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, <'auth', p_sas>, p_ems,
               p_rms, p_cert_req
   ),
   SendStream( ~tid, $C, $S, <'auth', p_sas>, app_keyc ),
   Out( senc(<<'11', certificate_request_context, pk(~ltkC)>, 
              <'15', 
               sign(<'client_cv', 
                     h(<p_messages, '13', certificate_request_context, $certificate_extensions
                       >)
                    >,
                    ~ltkC)
              >, 
              '20', 
              hmac(<
                    Expand(Expand(p_hs,
                                  <'fin_keychts', 
                                   h(<p_messages, '13', certificate_request_context, $certificate_extensions
                                     >)
                                  >,
                                  '32'),
                           <'fin', '0'>, '32'), 
                    h(<p_messages, '13', certificate_request_context, $certificate_extensions
                      >)
                   >)
             >,
             app_keyc)
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) recv_client_auth_post:
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, <p_sas, p_cas>, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   RecvStream( ~tid, $S, $C, <p_sas, p_cas>, app_keyc ),
   !Pk( $C, pk(~ltkC) ), L_ServerCertReq( ~tid, $S, $C, ~cert_req_ctxt ),
   In( senc(<<'11', ~cert_req_ctxt, pk(~ltkC)>, <'15', signature>, '20', 
             verify_data>,
            app_keyc)
   )
   ]
  --[
  S4_cert( ~tid ), Instance( ~tid, $S, 'server' ),
  Neq( ~cert_req_ctxt, '0' ),
  Eq( verify(signature,
             <'client_cv', 
              h(<p_messages, '13', ~cert_req_ctxt, $certificate_extensions>)>,
             pk(~ltkC)),
      true
  ),
  Eq( verify_data,
      hmac(<
            Expand(Expand(p_hs,
                          <'fin_keychts', 
                           h(<p_messages, '13', ~cert_req_ctxt, $certificate_extensions>)>,
                          '32'),
                   <'fin', '0'>, '32'), 
            h(<p_messages, '13', ~cert_req_ctxt, $certificate_extensions>)>)
  ),
  CIdentityPost( ~tid, $S, 'server', <$C, p_sas, 'auth'> ),
  CTranscriptPost( ~tid, $S, 'server', <p_messages, ~cert_req_ctxt> ),
  CHS( ~tid, $S, 'server', p_hs ),
  RPostHS( ~tid, $S, 'server',
           <p_hs, p_rms, $C, <p_sas, 'auth'>, p_messages>
  )
  ]->
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, <p_sas, 'auth'>, p_ems,
               p_rms, p_cert_req
   ),
   RecvStream( ~tid, $S, $C, <p_sas, 'auth'>, app_keyc )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) recv_client_auth_post:
     [
     F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                 p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                 p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, <p_sas, p_cas>, p_ems,
                 p_rms, p_cert_req
     )[no_precomp],
     RecvStream( ~tid, $S, $C, <p_sas, p_cas>, app_keyc ),
     !Pk( $C, pk(~ltkC) ), L_ServerCertReq( ~tid, $S, $C, ~cert_req_ctxt ),
     In( senc(<<'11', ~cert_req_ctxt, pk(~ltkC)>, <'15', signature>, '20', 
               verify_data>,
              app_keyc)
     )
     ]
    --[
    S4_cert( ~tid ), Instance( ~tid, $S, 'server' ),
    Neq( ~cert_req_ctxt, '0' ), Eq( z, true ),
    Eq( verify_data,
        hmac(<
              Expand(Expand(p_hs,
                            <'fin_keychts', 
                             h(<p_messages, '13', ~cert_req_ctxt, $certificate_extensions>)>,
                            '32'),
                     <'fin', '0'>, '32'), 
              h(<p_messages, '13', ~cert_req_ctxt, $certificate_extensions>)>)
    ),
    CIdentityPost( ~tid, $S, 'server', <$C, p_sas, 'auth'> ),
    CTranscriptPost( ~tid, $S, 'server', <p_messages, ~cert_req_ctxt> ),
    CHS( ~tid, $S, 'server', p_hs ),
    RPostHS( ~tid, $S, 'server',
             <p_hs, p_rms, $C, <p_sas, 'auth'>, p_messages>
    )
    ]->
     [
     F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
                 p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
                 p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, <p_sas, 'auth'>, p_ems,
                 p_rms, p_cert_req
     ),
     RecvStream( ~tid, $S, $C, <p_sas, 'auth'>, app_keyc )
     ]
    variants (modulo AC)
    1. $certificate_extensions
             = $certificate_extensions.64
       ~cert_req_ctxt
             = ~cert_req_ctxt.65
       ~ltkC = ~ltkC.66
       p_messages
             = p_messages.83
       signature
             = sign(<'client_cv', 
                     h(<p_messages.83, '13', ~cert_req_ctxt.65, $certificate_extensions.64>)>,
                    ~ltkC.66)
       z     = true
    
    2. $certificate_extensions
             = $certificate_extensions.77
       ~cert_req_ctxt
             = ~cert_req_ctxt.78
       ~ltkC = ~ltkC.79
       p_messages
             = p_messages.96
       signature
             = signature.109
       z     = verify(signature.109,
                      <'client_cv', 
                       h(<p_messages.96, '13', ~cert_req_ctxt.78, $certificate_extensions.77>)>,
                      pk(~ltkC.79))
    // loop breaker: [1]
  */

rule (modulo E) update_req_client:
   [
   F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   SendStream( ~tid, $C, $S, p_auth_status, p_app_keyc )
   ]
  --[
  C4_update_req( ~tid ), Instance( ~tid, $C, 'client' ),
  RPostHS( ~tid, $C, 'client', <p_hs, p_rms, $S, p_auth_status, p_messages>
  )
  ]->
   [
   F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, Expand(p_cats, <'ats', '0'>, '32'), p_sats, p_hs_keyc,
               p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   ),
   SendStream( ~tid, $C, $S, p_auth_status,
               Expand(Expand(p_cats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   Out( senc(<'24', '1'>, p_app_keyc) )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) update_req_server:
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   SendStream( ~tid, $S, $C, p_auth_status, p_app_keys )
   ]
  --[
  S4_update_req( ~tid ), Instance( ~tid, $S, 'server' ),
  RPostHS( ~tid, $S, 'server', <p_hs, p_rms, $C, p_auth_status, p_messages>
  )
  ]->
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, Expand(p_sats, <'ats', '0'>, '32'), p_hs_keyc,
               p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   ),
   SendStream( ~tid, $S, $C, p_auth_status,
               Expand(Expand(p_sats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   Out( senc(<'24', '1'>, p_app_keys) )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) update_recv_client:
   [
   F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   RecvStream( ~tid, $C, $S, p_auth_status, p_app_keys ),
   SendStream( ~tid, $C, $S, p_auth_status, p_app_keyc ),
   In( senc(<'24', '1'>, p_app_keys) )
   ]
  --[
  C4_update_recv( ~tid ), Instance( ~tid, $C, 'client' ),
  RPostHS( ~tid, $C, 'client', <p_hs, p_rms, $S, p_auth_status, p_messages>
  )
  ]->
   [
   F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, Expand(p_cats, <'ats', '0'>, '32'),
               Expand(p_sats, <'ats', '0'>, '32'), p_hs_keyc, p_hs_keys, p_auth_status,
               p_ems, p_rms, p_cert_req
   ),
   RecvStream( ~tid, $C, $S, p_auth_status,
               Expand(Expand(p_sats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   SendStream( ~tid, $C, $S, p_auth_status,
               Expand(Expand(p_cats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   Out( senc(<'24', '0'>, p_app_keyc) )
   ]

  // loop breakers: [1,2]
  /* has exactly the trivial AC variant */

rule (modulo E) update_recv_server:
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   RecvStream( ~tid, $S, $C, p_auth_status, p_app_keyc ),
   SendStream( ~tid, $S, $C, p_auth_status, p_app_keys ),
   In( senc(<'24', '1'>, p_app_keyc) )
   ]
  --[
  S4_update_recv( ~tid ), Instance( ~tid, $S, 'server' ),
  RPostHS( ~tid, $S, 'server', <p_hs, p_rms, $C, p_auth_status, p_messages>
  )
  ]->
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, Expand(p_cats, <'ats', '0'>, '32'),
               Expand(p_sats, <'ats', '0'>, '32'), p_hs_keyc, p_hs_keys, p_auth_status,
               p_ems, p_rms, p_cert_req
   ),
   RecvStream( ~tid, $S, $C, p_auth_status,
               Expand(Expand(p_cats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   SendStream( ~tid, $S, $C, p_auth_status,
               Expand(Expand(p_sats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   ),
   Out( senc(<'24', '0'>, p_app_keys) )
   ]

  // loop breakers: [1,2]
  /* has exactly the trivial AC variant */

rule (modulo E) update_fin_client:
   [
   F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   RecvStream( ~tid, $C, $S, p_auth_status, p_app_keys ),
   In( senc(<'24', '0'>, p_app_keys) )
   ]
  --[
  C4_update_fin( ~tid ), Instance( ~tid, $C, 'client' ),
  RPostHS( ~tid, $C, 'client', <p_hs, p_rms, $S, p_auth_status, p_messages>
  )
  ]->
   [
   F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, Expand(p_sats, <'ats', '0'>, '32'), p_hs_keyc,
               p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   ),
   RecvStream( ~tid, $C, $S, p_auth_status,
               Expand(Expand(p_sats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) update_fin_server:
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
               p_rms, p_cert_req
   )[no_precomp],
   RecvStream( ~tid, $S, $C, p_auth_status, p_app_keyc ),
   In( senc(<'24', '0'>, p_app_keyc) )
   ]
  --[
  S4_update_fin( ~tid ), Instance( ~tid, $S, 'server' ),
  RPostHS( ~tid, $S, 'server', <p_hs, p_rms, $C, p_auth_status, p_messages>
  )
  ]->
   [
   F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g, p_sg,
               p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi, p_es,
               p_hs, p_ms, Expand(p_cats, <'ats', '0'>, '32'), p_sats, p_hs_keyc,
               p_hs_keys, p_auth_status, p_ems, p_rms, p_cert_req
   ),
   RecvStream( ~tid, $S, $C, p_auth_status,
               Expand(Expand(p_cats, <'ats', '0'>, '32'), <'adke_wk', '0'>, '32')
   )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Ltk:
   [ !Ltk( $A, ~ltkA ) ] --[ RevLtk( $A ) ]-> [ Out( ~ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_DHExp:
   [ DHExp( ~x, ~tid, $A ) ]
  --[ RevDHExp( ~tid, $A, ~x ) ]->
   [ Out( ~x ), DHExp( ~x, ~tid, $A ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_PSK:
   [ F_SecretPSK( $A, res_psk ) ]
  --[ RevealPSK( $A, res_psk ) ]->
   [ Out( res_psk ) ]

  /* has exactly the trivial AC variant */

lemma one_C2d_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C2d( tid ) @ #i) ∧ (C2d( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C2d( tid ) @ #i) ∧ (C2d( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C2d_PSK_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((C2d_PSK( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C2d_PSK( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S2d_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S2d( tid ) @ #i) ∧ (S2d( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S2d( tid ) @ #i) ∧ (S2d( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S2d_PSK_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((S2d_PSK( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S2d_PSK( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C3_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C3( tid ) @ #i) ∧ (C3( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C3( tid ) @ #i) ∧ (C3( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_C3_cert_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((C3_cert( tid ) @ #i) ∧ (C3_cert( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C3_cert( tid ) @ #i) ∧ (C3_cert( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S3_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S3( tid ) @ #i) ∧ (S3( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S3( tid ) @ #i) ∧ (S3( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma one_S3_cert_per_tid [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j.
    ((S3_cert( tid ) @ #i) ∧ (S3_cert( tid ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S3_cert( tid ) @ #i) ∧ (S3_cert( tid ) @ #j) ∧ ¬(#i = #j)"
*/
by sorry

lemma S3_vs_S3_cert [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S3( tid ) @ #i) ∧ (S3_cert( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S3( tid ) @ #i) ∧ (S3_cert( tid ) @ #j)"
*/
by sorry

lemma C3_vs_C3_cert [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C3( tid ) @ #i) ∧ (C3_cert( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C3( tid ) @ #i) ∧ (C3_cert( tid ) @ #j)"
*/
by sorry

lemma S2d_vs_S2d_PSK [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((S2d( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (S2d( tid ) @ #i) ∧ (S2d_PSK( tid ) @ #j)"
*/
by sorry

lemma C2d_vs_C2d_PSK [reuse, heuristic=S]:
  all-traces
  "∀ tid #i #j. ((C2d( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j)) ⇒ (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ tid #i #j. (C2d( tid ) @ #i) ∧ (C2d_PSK( tid ) @ #j)"
*/
by sorry

lemma tid_invariant [use_induction, reuse, heuristic=S]:
  all-traces
  "∀ tid actor role #i.
    (Instance( tid, actor, role ) @ #i) ⇒
    (∃ #j. (Start( tid, actor, role ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor role #i.
  (Instance( tid, actor, role ) @ #i)
 ∧
  ∀ #j. (Start( tid, actor, role ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Start( tid, actor, role ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    solve( Instance( tid, actor, role ) @ #i )
      case certificate_request
      solve( F_State_S2c( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es,
                          p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                          p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case encrypted_extensions_case_1
        by contradiction /* from formulas */
      next
        case encrypted_extensions_case_2
        by contradiction /* from formulas */
      next
        case encrypted_extensions_case_3
        by contradiction /* from formulas */
      next
        case encrypted_extensions_case_4
        by contradiction /* from formulas */
      next
        case encrypted_extensions_case_5
        by contradiction /* from formulas */
      next
        case encrypted_extensions_case_6
        by contradiction /* from formulas */
      qed
    next
      case certificate_request_post
      solve( F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case certificate_request_post
        by contradiction /* from formulas */
      next
        case new_session_ticket
        by contradiction /* from formulas */
      next
        case recv_client_auth
        by contradiction /* from formulas */
      next
        case recv_client_auth_cert
        by contradiction /* from formulas */
      next
        case recv_client_auth_post
        by contradiction /* from formulas */
      next
        case update_fin_server
        by contradiction /* from formulas */
      next
        case update_recv_server
        by contradiction /* from formulas */
      next
        case update_req_server
        by contradiction /* from formulas */
      qed
    next
      case client_auth
      solve( F_State_C3( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, '0'
             )[no_precomp] ▶₀ #i )
        case recv_server_auth
        by contradiction /* from formulas */
      next
        case recv_server_auth_psk
        by contradiction /* from formulas */
      qed
    next
      case client_auth_cert
      solve( F_State_C3( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es,
                         p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                         p_rms, '1'
             )[no_precomp] ▶₀ #i )
        case recv_server_auth
        by contradiction /* from formulas */
      next
        case recv_server_auth_psk
        by contradiction /* from formulas */
      qed
    next
      case client_auth_post
      solve( F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, <p_cas, p_sas>,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case client_auth
        by contradiction /* from formulas */
      next
        case client_auth_cert
        by contradiction /* from formulas */
      next
        case client_auth_post
        by contradiction /* from formulas */
      next
        case recv_certificate_request_post
        by contradiction /* from formulas */
      next
        case recv_new_session_ticket
        by contradiction /* from formulas */
      next
        case update_fin_client
        by contradiction /* from formulas */
      next
        case update_recv_client
        by contradiction /* from formulas */
      next
        case update_req_client
        by contradiction /* from formulas */
      qed
    next
      case client_gen_keys
      solve( F_State_C2a( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                          p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                          p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case recv_server_hello
        by contradiction /* from formulas */
      next
        case recv_server_hello_psk
        by contradiction /* from formulas */
      next
        case recv_server_hello_psk_dhe_case_1
        by contradiction /* from formulas */
      next
        case recv_server_hello_psk_dhe_case_2
        by contradiction /* from formulas */
      next
        case recv_server_hello_psk_dhe_case_3
        by contradiction /* from formulas */
      next
        case recv_server_hello_psk_dhe_case_4
        by contradiction /* from formulas */
      qed
    next
      case encrypted_extensions
      solve( F_State_S2b( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                          p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                          p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case server_gen_keys_case_1
        by contradiction /* from formulas */
      next
        case server_gen_keys_case_2
        by contradiction /* from formulas */
      next
        case server_gen_keys_case_3
        by contradiction /* from formulas */
      next
        case server_gen_keys_case_4
        by contradiction /* from formulas */
      next
        case server_gen_keys_case_5
        by contradiction /* from formulas */
      next
        case server_gen_keys_case_6
        by contradiction /* from formulas */
      qed
    next
      case hello_retry_request
      solve( F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         $p_sg, '0', p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case recv_client_hello
        solve( F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc.1, p_ns,
                           p_g, $p_sg, '0', p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                           p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                           p_auth_status, p_ems, p_rms, p_cert_req
               )[no_precomp] ▶₂ #vr )
          case start_server
          by contradiction /* from formulas */
        qed
      next
        case recv_client_hello_psk_case_1
        solve( F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc.1, p_ns,
                           p_g, $p_sg, '0', p_x, p_y, p_gx.1, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                           p_edi.1, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                           p_auth_status, p_ems, p_rms, p_cert_req
               )[no_precomp] ▶₀ #vr )
          case start_server
          by contradiction /* from formulas */
        qed
      next
        case recv_client_hello_psk_case_2
        solve( F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc.1, p_ns,
                           p_g, $p_sg, '0', p_x, p_y, p_gx.1, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                           p_edi.1, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                           p_auth_status.1, p_ems, p_rms, p_cert_req
               )[no_precomp] ▶₀ #vr )
          case start_server
          by contradiction /* from formulas */
        qed
      qed
    next
      case new_session_ticket
      solve( F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, Expand(ms, <'rms', h(messages)>, '32'), p_cert_req
             )[no_precomp] ▶₀ #i )
        case certificate_request_post
        by contradiction /* from formulas */
      next
        case new_session_ticket
        by contradiction /* from formulas */
      next
        case recv_client_auth
        by contradiction /* from formulas */
      next
        case recv_client_auth_cert
        by contradiction /* from formulas */
      next
        case recv_client_auth_post
        by contradiction /* from formulas */
      next
        case update_fin_server
        by contradiction /* from formulas */
      next
        case update_recv_server
        by contradiction /* from formulas */
      next
        case update_req_server
        by contradiction /* from formulas */
      qed
    next
      case recv_certificate_request
      solve( F_State_C2c( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es,
                          p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                          p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case recv_encrypted_extensions_case_1
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_2
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_3
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_4
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_5
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_6
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_7
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_8
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_9
        by contradiction /* from formulas */
      qed
    next
      case recv_certificate_request_post
      solve( F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case client_auth
        by contradiction /* from formulas */
      next
        case client_auth_cert
        by contradiction /* from formulas */
      next
        case client_auth_post
        by contradiction /* from formulas */
      next
        case recv_certificate_request_post
        by contradiction /* from formulas */
      next
        case recv_new_session_ticket
        by contradiction /* from formulas */
      next
        case update_fin_client
        by contradiction /* from formulas */
      next
        case update_recv_client
        by contradiction /* from formulas */
      next
        case update_req_client
        by contradiction /* from formulas */
      qed
    next
      case recv_client_auth
      solve( F_State_S3( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, '0'
             )[no_precomp] ▶₀ #i )
        case server_auth
        by contradiction /* from formulas */
      next
        case server_auth_psk
        by contradiction /* from formulas */
      qed
    next
      case recv_client_auth_cert
      solve( F_State_S3( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, '1'
             )[no_precomp] ▶₀ #i )
        case server_auth
        by contradiction /* from formulas */
      next
        case server_auth_psk
        by contradiction /* from formulas */
      qed
    next
      case recv_client_auth_post
      solve( F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, <p_sas, p_cas>,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case certificate_request_post
        by contradiction /* from formulas */
      next
        case new_session_ticket
        by contradiction /* from formulas */
      next
        case recv_client_auth
        by contradiction /* from formulas */
      next
        case recv_client_auth_cert
        by contradiction /* from formulas */
      next
        case recv_client_auth_post
        by contradiction /* from formulas */
      next
        case update_fin_server
        by contradiction /* from formulas */
      next
        case update_recv_server
        by contradiction /* from formulas */
      next
        case update_req_server
        by contradiction /* from formulas */
      qed
    next
      case recv_encrypted_extensions
      solve( F_State_C2b( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                          p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                          p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case client_gen_keys_case_1
        by contradiction /* from formulas */
      next
        case client_gen_keys_case_2
        by contradiction /* from formulas */
      next
        case client_gen_keys_case_3
        by contradiction /* from formulas */
      next
        case client_gen_keys_case_4
        by contradiction /* from formulas */
      next
        case client_gen_keys_case_5
        by contradiction /* from formulas */
      next
        case client_gen_keys_case_6
        by contradiction /* from formulas */
      next
        case client_gen_keys_case_7
        by contradiction /* from formulas */
      next
        case client_gen_keys_case_8
        by contradiction /* from formulas */
      next
        case client_gen_keys_case_9
        by contradiction /* from formulas */
      qed
    next
      case recv_hello_retry_request
      solve( F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g1,
                         <$g1, $g2>, '0', p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                         p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                         p_auth_status, p_ems, p_rms, p_cert_req
             ) ▶₀ #i )
        case client_hello
        by contradiction /* from formulas */
      next
        case client_hello_psk_case_1
        by contradiction /* from formulas */
      next
        case client_hello_psk_case_2
        by contradiction /* from formulas */
      qed
    next
      case recv_hello_retry_request_psk
      solve( F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g1,
                         <$g1, $g2>, '0', p_x, p_y, p_gx, p_gy, p_gxy, <'0', '1'>, p_psk_id,
                         p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                         p_auth_status, p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case client_hello_psk_case_1
        by contradiction /* from formulas */
      next
        case client_hello_psk_case_2
        by contradiction /* from formulas */
      qed
    next
      case recv_new_session_ticket
      solve( F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, Expand(ms, <'rms', h(messages)>, '32'), p_cert_req
             )[no_precomp] ▶₀ #i )
        case client_auth
        by contradiction /* from formulas */
      next
        case client_auth_cert
        by contradiction /* from formulas */
      next
        case client_auth_post
        by contradiction /* from formulas */
      next
        case recv_certificate_request_post
        by contradiction /* from formulas */
      next
        case recv_new_session_ticket
        by contradiction /* from formulas */
      next
        case update_fin_client
        by contradiction /* from formulas */
      next
        case update_recv_client
        by contradiction /* from formulas */
      next
        case update_req_client
        by contradiction /* from formulas */
      qed
    next
      case recv_server_auth
      solve( F_State_C2d( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es,
                          p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                          p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case recv_certificate_request_case_1
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_2
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_3
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_4
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_5
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_6
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_7
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_8
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_9
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_1
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_2
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_3
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_4
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_5
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_6
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_7
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_8
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_9
        by contradiction /* from formulas */
      qed
    next
      case recv_server_auth_psk
      solve( F_State_C2d( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                          p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                          p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case recv_certificate_request_case_1
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_2
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_3
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_4
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_5
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_6
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_7
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_8
        by contradiction /* from formulas */
      next
        case recv_certificate_request_case_9
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_1
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_2
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_3
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_4
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_5
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_6
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_7
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_8
        by contradiction /* from formulas */
      next
        case skip_recv_certificate_request_case_9
        by contradiction /* from formulas */
      qed
    next
      case recv_server_hello
      solve( F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g,
                         p_sg, p_hrr, ~x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case client_hello
        by contradiction /* from formulas */
      next
        case client_hello_psk_case_1
        by contradiction /* from formulas */
      next
        case client_hello_psk_case_2
        by contradiction /* from formulas */
      next
        case recv_hello_retry_request_case_1
        by contradiction /* from formulas */
      next
        case recv_hello_retry_request_case_2
        by contradiction /* from formulas */
      next
        case recv_hello_retry_request_case_3
        by contradiction /* from formulas */
      next
        case recv_hello_retry_request_psk_case_1
        by contradiction /* from formulas */
      next
        case recv_hello_retry_request_psk_case_2
        by contradiction /* from formulas */
      qed
    next
      case recv_server_hello_psk
      solve( F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, <'0', '1'>, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case client_hello_psk_case_1
        by contradiction /* from formulas */
      next
        case client_hello_psk_case_2
        by contradiction /* from formulas */
      next
        case recv_hello_retry_request_psk_case_1
        by contradiction /* from formulas */
      next
        case recv_hello_retry_request_psk_case_2
        by contradiction /* from formulas */
      qed
    next
      case recv_server_hello_psk_dhe
      solve( F_State_C1( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, $g,
                         p_sg, p_hrr, ~x, p_y, p_gx, p_gy, p_gxy, <'0', '1'>, ~ticket, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             ) ▶₀ #i )
        case client_hello_psk_case_1
        by contradiction /* from formulas */
      next
        case client_hello_psk_case_2
        by contradiction /* from formulas */
      next
        case recv_hello_retry_request_psk_case_1
        by contradiction /* from formulas */
      next
        case recv_hello_retry_request_psk_case_2
        by contradiction /* from formulas */
      qed
    next
      case server_auth
      solve( F_State_S2d( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, 'na', p_psk_id, p_edi, p_es,
                          p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                          p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case certificate_request_case_1
        by contradiction /* from formulas */
      next
        case certificate_request_case_2
        by contradiction /* from formulas */
      next
        case certificate_request_case_3
        by contradiction /* from formulas */
      next
        case certificate_request_case_4
        by contradiction /* from formulas */
      next
        case certificate_request_case_5
        by contradiction /* from formulas */
      next
        case certificate_request_case_6
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_1
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_2
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_3
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_4
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_5
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_6
        by contradiction /* from formulas */
      qed
    next
      case server_auth_psk
      solve( F_State_S2d( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                          p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                          p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case certificate_request_case_1
        by contradiction /* from formulas */
      next
        case certificate_request_case_2
        by contradiction /* from formulas */
      next
        case certificate_request_case_3
        by contradiction /* from formulas */
      next
        case certificate_request_case_4
        by contradiction /* from formulas */
      next
        case certificate_request_case_5
        by contradiction /* from formulas */
      next
        case certificate_request_case_6
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_1
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_2
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_3
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_4
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_5
        by contradiction /* from formulas */
      next
        case skip_certificate_request_case_6
        by contradiction /* from formulas */
      qed
    next
      case server_gen_keys
      solve( F_State_S2a( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                          p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                          p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case server_hello
        by contradiction /* from formulas */
      next
        case server_hello_psk_case_1
        by contradiction /* from formulas */
      next
        case server_hello_psk_case_2
        by contradiction /* from formulas */
      next
        case server_hello_psk_dhe_case_1
        by contradiction /* from formulas */
      next
        case server_hello_psk_dhe_case_2
        by contradiction /* from formulas */
      qed
    next
      case server_hello
      solve( F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, $p_g,
                         $p_g, p_hrr, p_x, p_y, kempk($p_g, some_x), p_gy, p_gxy, p_psk_ke_mode,
                         p_psk_id, p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                         p_auth_status, p_ems, p_rms, p_cert_req
             ) ▶₀ #i )
        case recv_client_hello
        solve( F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc.1, p_ns,
                           p_g.1, $p_g, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                           p_edi, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                           p_auth_status, p_ems, p_rms, p_cert_req
               )[no_precomp] ▶₂ #vr )
          case hello_retry_request
          by contradiction /* from formulas */
        next
          case start_server
          by contradiction /* from formulas */
        qed
      qed
    next
      case server_hello_psk
      solve( F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, ~ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, <'0', '1'>, ~ticket, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             ) ▶₀ #i )
        case recv_client_hello_psk_case_1
        solve( F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc.1, p_ns,
                           p_g, p_sg, p_hrr, p_x, p_y, p_gx.1, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                           p_edi.1, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                           p_auth_status, p_ems, p_rms, p_cert_req
               )[no_precomp] ▶₀ #vr )
          case hello_retry_request
          by contradiction /* from formulas */
        next
          case start_server
          by contradiction /* from formulas */
        qed
      next
        case recv_client_hello_psk_case_2
        solve( F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc.1, p_ns,
                           p_g, p_sg, p_hrr, p_x, p_y, p_gx.1, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                           p_edi.1, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                           p_auth_status.1, p_ems, p_rms, p_cert_req
               )[no_precomp] ▶₀ #vr )
          case hello_retry_request
          by contradiction /* from formulas */
        next
          case start_server
          by contradiction /* from formulas */
        qed
      qed
    next
      case server_hello_psk_dhe
      solve( F_State_S1( ~tid, $S, $C, p_res_psk, p_messages, p_nc, ~ns, $g,
                         p_sg, p_hrr, p_x, p_y, z, p_gy, p_gxy, <'0', '1'>, ~ticket, p_edi, p_es,
                         p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status, p_ems,
                         p_rms, p_cert_req
             ) ▶₀ #i )
        case recv_client_hello_psk_case_1
        solve( F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc.1, p_ns,
                           p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                           p_edi.1, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                           p_auth_status, p_ems, p_rms, p_cert_req
               )[no_precomp] ▶₀ #vr )
          case hello_retry_request
          by contradiction /* from formulas */
        next
          case start_server
          by contradiction /* from formulas */
        qed
      next
        case recv_client_hello_psk_case_2
        solve( F_State_S0( ~tid, $S, $C, p_res_psk, p_messages, p_nc.1, p_ns,
                           p_g, p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id,
                           p_edi.1, p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys,
                           p_auth_status.1, p_ems, p_rms, p_cert_req
               )[no_precomp] ▶₀ #vr )
          case hello_retry_request
          by contradiction /* from formulas */
        next
          case start_server
          by contradiction /* from formulas */
        qed
      qed
    next
      case skip_certificate_request
      solve( F_State_S2c( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                          p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                          p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case encrypted_extensions_case_1
        by contradiction /* from formulas */
      next
        case encrypted_extensions_case_2
        by contradiction /* from formulas */
      next
        case encrypted_extensions_case_3
        by contradiction /* from formulas */
      next
        case encrypted_extensions_case_4
        by contradiction /* from formulas */
      next
        case encrypted_extensions_case_5
        by contradiction /* from formulas */
      next
        case encrypted_extensions_case_6
        by contradiction /* from formulas */
      qed
    next
      case skip_recv_certificate_request
      solve( F_State_C2c( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                          p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                          p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                          p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case recv_encrypted_extensions_case_1
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_2
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_3
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_4
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_5
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_6
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_7
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_8
        by contradiction /* from formulas */
      next
        case recv_encrypted_extensions_case_9
        by contradiction /* from formulas */
      qed
    next
      case update_fin_client
      solve( F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case client_auth
        by contradiction /* from formulas */
      next
        case client_auth_cert
        by contradiction /* from formulas */
      next
        case client_auth_post
        by contradiction /* from formulas */
      next
        case recv_certificate_request_post
        by contradiction /* from formulas */
      next
        case recv_new_session_ticket
        by contradiction /* from formulas */
      next
        case update_fin_client
        by contradiction /* from formulas */
      next
        case update_recv_client
        by contradiction /* from formulas */
      next
        case update_req_client
        by contradiction /* from formulas */
      qed
    next
      case update_fin_server
      solve( F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case certificate_request_post
        by contradiction /* from formulas */
      next
        case new_session_ticket
        by contradiction /* from formulas */
      next
        case recv_client_auth
        by contradiction /* from formulas */
      next
        case recv_client_auth_cert
        by contradiction /* from formulas */
      next
        case recv_client_auth_post
        by contradiction /* from formulas */
      next
        case update_fin_server
        by contradiction /* from formulas */
      next
        case update_recv_server
        by contradiction /* from formulas */
      next
        case update_req_server
        by contradiction /* from formulas */
      qed
    next
      case update_recv_client
      solve( F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case client_auth
        by contradiction /* from formulas */
      next
        case client_auth_cert
        by contradiction /* from formulas */
      next
        case client_auth_post
        by contradiction /* from formulas */
      next
        case recv_certificate_request_post
        by contradiction /* from formulas */
      next
        case recv_new_session_ticket
        by contradiction /* from formulas */
      next
        case update_fin_client
        by contradiction /* from formulas */
      next
        case update_recv_client
        by contradiction /* from formulas */
      next
        case update_req_client
        by contradiction /* from formulas */
      qed
    next
      case update_recv_server
      solve( F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case certificate_request_post
        by contradiction /* from formulas */
      next
        case new_session_ticket
        by contradiction /* from formulas */
      next
        case recv_client_auth
        by contradiction /* from formulas */
      next
        case recv_client_auth_cert
        by contradiction /* from formulas */
      next
        case recv_client_auth_post
        by contradiction /* from formulas */
      next
        case update_fin_server
        by contradiction /* from formulas */
      next
        case update_recv_server
        by contradiction /* from formulas */
      next
        case update_req_server
        by contradiction /* from formulas */
      qed
    next
      case update_req_client
      solve( F_State_C4( ~tid, $C, $S, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case client_auth
        by contradiction /* from formulas */
      next
        case client_auth_cert
        by contradiction /* from formulas */
      next
        case client_auth_post
        by contradiction /* from formulas */
      next
        case recv_certificate_request_post
        by contradiction /* from formulas */
      next
        case recv_new_session_ticket
        by contradiction /* from formulas */
      next
        case update_fin_client
        by contradiction /* from formulas */
      next
        case update_recv_client
        by contradiction /* from formulas */
      next
        case update_req_client
        by contradiction /* from formulas */
      qed
    next
      case update_req_server
      solve( F_State_S4( ~tid, $S, $C, p_res_psk, p_messages, p_nc, p_ns, p_g,
                         p_sg, p_hrr, p_x, p_y, p_gx, p_gy, p_gxy, p_psk_ke_mode, p_psk_id, p_edi,
                         p_es, p_hs, p_ms, p_cats, p_sats, p_hs_keyc, p_hs_keys, p_auth_status,
                         p_ems, p_rms, p_cert_req
             )[no_precomp] ▶₀ #i )
        case certificate_request_post
        by contradiction /* from formulas */
      next
        case new_session_ticket
        by contradiction /* from formulas */
      next
        case recv_client_auth
        by contradiction /* from formulas */
      next
        case recv_client_auth_cert
        by contradiction /* from formulas */
      next
        case recv_client_auth_post
        by contradiction /* from formulas */
      next
        case update_fin_server
        by contradiction /* from formulas */
      next
        case update_recv_server
        by contradiction /* from formulas */
      next
        case update_req_server
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma one_start_per_tid [reuse, heuristic=S C]:
  all-traces
  "∀ tid actor actor2 role role2 #i #j.
    ((Start( tid, actor, role ) @ #i) ∧ (Start( tid, actor2, role2 ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ tid actor actor2 role role2 #i #j.
  (Start( tid, actor, role ) @ #i) ∧ (Start( tid, actor2, role2 ) @ #j)
 ∧
  ¬(#i = #j)"
*/
by sorry

lemma cert_req_origin [sources]:
  all-traces
  "∀ certificate_request_context certificate_extensions keys #i.
    (!KU( senc(<'13', certificate_request_context, certificate_extensions>,
               keys)
     ) @ #i) ⇒
    ((∃ #j. (!KU( certificate_request_context ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j tid actor role.
       (RCertReqCtxt( tid, actor, role, certificate_request_context ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ certificate_request_context certificate_extensions keys #i.
  (!KU( senc(<'13', certificate_request_context, certificate_extensions>,
             keys)
   ) @ #i)
 ∧
  (∀ #j. (!KU( certificate_request_context ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j tid actor role.
    (RCertReqCtxt( tid, actor, role, certificate_request_context ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma nst_source [sources]:
  all-traces
  "∀ ticket ticket_age_add tkt_lt tkt_exts app_key #i.
    (!KU( senc(<'4', tkt_lt, ticket_age_add, ticket, tkt_exts>, app_key)
     ) @ #i) ⇒
    ((∃ #j #k.
       (((!KU( ticket ) @ #j) ∧ (!KU( ticket_age_add ) @ #k)) ∧ (#j < #i)) ∧
       (#k < #i)) ∨
     (∃ tid S #j.
       (RNST( tid, S, 'server', <ticket, ticket_age_add> ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ ticket ticket_age_add tkt_lt tkt_exts app_key #i.
  (!KU( senc(<'4', tkt_lt, ticket_age_add, ticket, tkt_exts>, app_key)
   ) @ #i)
 ∧
  (∀ #j #k.
    (!KU( ticket ) @ #j) ∧ (!KU( ticket_age_add ) @ #k)
   ⇒
    ((¬(#j < #i)) ∨ (¬(#k < #i)))) ∧
  (∀ tid S #j.
    (RNST( tid, S, 'server', <ticket, ticket_age_add> ) @ #j) ⇒ ¬(#j < #i))"
*/
by sorry

/* All well-formedness checks were successful. */

end