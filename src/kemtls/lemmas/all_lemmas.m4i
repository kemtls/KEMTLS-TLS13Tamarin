define(<!uniq!>, <!
lemma one_$1_per_tid [reuse, heuristic=i]:
    "All tid #i #j. $1(tid)@i & $1(tid)@j ==> #i = #j"
!>)

define(<!one_of!>, <!
lemma $1_vs_$2 [reuse, heuristic=S]:
    "All tid #i #j. $1(tid)@i & $2(tid)@j ==> F"
!>)


define(<!lemma_tid_invariant!>, <!
lemma tid_invariant [use_induction, reuse, heuristic=S]:
  "All tid actor role #i. Instance(tid, actor, role)@i==>
      (Ex #j. Start(tid, actor, role)@j & (#j < #i))"
!>)

define(<!lemma_one_start_per_tid!>, <!
lemma one_start_per_tid [reuse, heuristic=SC]:
  "All tid actor actor2 role role2 #i #j. Start(tid, actor, role)@i & Start(tid, actor2, role2)@j ==>#i=#j"
!>)


/*
  TYPING LEMMAS
*/
define(<!lemma_cert_req_origin!>, <!
lemma cert_req_origin [sources, heuristic=c]:
  "All certificate_request_context certificate_extensions keys #i.
    KU(senc{handshake_record('13', certificate_request_context, certificate_extensions)}keys)@i ==> 
      (Ex #j. KU(certificate_request_context)@j & #j < #i) |
      (Ex #j tid actor role. running(CertReqCtxt, actor, role, certificate_request_context)@j & #j < #i)"
!>)

define(<!lemma_nst_source!>, <!
lemma nst_source [sources]:
  "All ticket ticket_age_add tkt_lt tkt_exts app_key #i.
    KU(senc{handshake_record('4', tkt_lt, ticket_age_add, ticket, tkt_exts)}app_key)@i ==>
      (Ex #j #k. KU(ticket)@j & KU(ticket_age_add)@k & #j < #i & #k < #i) |
      (Ex tid S #j. running_server(NST, ticket, ticket_age_add)@j & #j < #i)"
!>)

ifdef(<!SIMPLE_MODEL!>, <!

define(<!lemma_cert_req_origin!>, <!
lemma cert_req_origin [sources, heuristic=c]:
  "All certificate_request_context keys #i.
    KU(senc{<certificate_request_context>}keys)@i ==> 
      (Ex #j. KU(certificate_request_context)@j & #j < #i) |
      (Ex #j tid actor role. running(CertReqCtxt, actor, role, certificate_request_context)@j & #j < #i)"
!>)

define(<!lemma_nst_source!>, <!
lemma nst_source [sources]:
  "All ticket ticket_age_add tkt_exts app_key #i.
    KU(senc{<ticket_age_add, ticket, tkt_exts>}app_key)@i ==>
      (Ex #j #k. KU(ticket)@j & KU(ticket_age_add)@k & #j < #i & #k < #i) |
      (Ex tid S #j. running_server(NST, ticket, ticket_age_add)@j & #j < #i)"
!>)

!>)

ifdef(<!PSK!>, <!!>, <!
define(<!lemma_nst_source!>,<!!>)
!>)

/*
  LEMMAS USED IN AUTH_HELPERS
  
*/

define(<!lemma_matching_nonces!>, <!
lemma matching_nonces [reuse, heuristic=i]:
  "All tid tid2 actor actor2 role  nonces #i #j. 
    running(Nonces, actor, role, nonces)@i & 
    running2(Nonces, actor2, role, nonces)@j ==>
    tid = tid2 & actor = actor2"
!>)

define(<!lemma_consistent_nonces!>, <!
lemma consistent_nonces [reuse, heuristic=S]:
  "All tid actor role nonces #i. 
    commit(Nonces, actor, role, nonces)@i ==>
      Ex #j. running(Nonces, actor, role, nonces)@j"
!>)

define(<!lemma_invariant_nonces!>, <!
lemma invariant_nonces [reuse, heuristic=i]:
  "All tid actor actor2 role role2 nonces nonces2 #i #j.
    running(Nonces, actor, role, nonces)@i &
    running(Nonces, actor2, role2, nonces2)@j ==> #i = #j"
!>)

define(<!lemma_matching_rms_nonces!>, <!
lemma matching_rms_nonces [reuse, heuristic=c]:
  "All nonces tid tid2 actor actor2 peer peer2 rms messages #i #j. 
    running(RMS, actor, 'server', peer, rms, messages)@i &
    running2(RMS, actor2, 'client', peer2, rms, messages)@j &
    commit2(Nonces, actor2, 'client', nonces)@j ==>
      Ex #a.
        commit(Nonces, actor, 'server', nonces)@a & 
        #a < #i"

!>)

/*
  LEMMAS USED IN SECRET_HELPERS

*/

define(<!lemma_ku_extract!>, <!
lemma ku_extract [reuse, use_induction, heuristic=c]:
  "All a b #i. KU(Extract(a, b))@i ==> Ex #j #k. KU(a)@j & KU(b)@k & #j < #i & #k < #i"
!>)

define(<!lemma_ku_expand!>, <!
lemma ku_expand [reuse, use_induction, heuristic=c]:
"All secret label len #i. KU(Expand(secret, label, len))@i ==>
  (Ex #j. KU(secret)@j & #j < #i) |
  (not (Ex #k. KU(secret)@k & #k < #i) &
  (Ex actor #l. RevealPSK(actor, Expand(secret, label, len))@l & #l < #i))"
!>)

define(<!lemma_ku_hs!>, <!
lemma ku_hs [reuse, heuristic=s]:
  "All tid actor role es hs res_psk ess #i #j.
    running(HS, actor, role, hs)@i &
    hs = HandshakeSecret &
    es = EarlySecret &
    KU(hs)@j ==>
      Ex #k #l. KU(ess)@k & KU(res_psk)@l & #k < #j & #l < #j"
!>)

define(<!lemma_ku_ahs!>, <!
lemma ku_ahs [reuse, heuristic=s]:
  "All tid actor role ss hs ahs #i #j.
    running(AHS, actor, role, ahs)@i &
    ahs = AuthHandshakeSecret &
    KU(ahs)@j  ==>
      Ex #k #l. KU(hs)@k & KU(ss)@l & #k < #j & #l < #j" 
!>)

define(<!lemma_ku_ms!>, <!
lemma ku_ms [reuse, heuristic=s]:
  "All tid actor role ms ahs clauth_ss #i #j.
    running(MS, actor, role, ms)@i &
    ms = MasterSecret &
    KU(ms)@j ==>
      Ex #k #l. KU(ahs)@k & KU(clauth_ss)@l & #k < #j & #l < #j" 
!>)

define(<!lemma_ku_ltk!>, <!
lemma ku_ltk [reuse, heuristic=s]:
  "All actor ltkA #i #j.
    GenLtk(actor, ltkA)@i & KU(ltkA)@j ==>
      Ex #k. RevLtk(actor)@k & #k < #j"
!>)

define(<!lemma_ku_fresh_psk!>, <!
lemma ku_fresh_psk [reuse]:
  "All ticket res_psk #i #k.
      FreshPSK(ticket,res_psk)@i & KU(res_psk)@k ==> 
        Ex actor #j. 
          RevealPSK(actor, res_psk)@j & #j < #k"
!>)

define(<!lemma_posths_rms_weak!>, <!
// For any running(PostHS...) either the auth_status was set in the main HS and
// unchanged (along with the RMS), or there was post-hs auth, which means the
// peer's auth_status is 'auth', the actor is a server
lemma posths_rms_weak [reuse, use_induction]:
  "All tid actor role hs rms peer auth_status messages #i. 
    running(PostHS, actor, role, hs, rms, peer, auth_status, messages)@i ==>
      Ex aas pas ms #j. 
                running(RMS, actor, role, peer, rms, messages)@j &
                ms = MasterSecret & rms = resumption_master_secret() & #j < #i &
                auth_status = <aas, pas>"
!>)


define(<!lemma_posths_rms!>, <!
// For any running(PostHS...) either the auth_status was set in the main HS and
// unchanged (along with the RMS), or there was post-hs auth, which means the
// peer's auth_status is 'auth', the actor is a server
lemma posths_rms [reuse, use_induction]:
  "All tid actor role hs rms peer auth_status messages #i. 
    running(PostHS, actor, role, hs, rms, peer, auth_status, messages)@i ==>
      Ex aas pas ms #j. 
                running(RMS, actor, role, peer, rms, messages)@j &
                ms = MasterSecret & rms = resumption_master_secret() & #j < #i &
                auth_status = <aas, pas> &
      (
        (Ex aas2 #k. commit(Identity, actor, role, peer, <aas2, pas>)@k & #k < #i) |
        (Ex aas2 #k. commit(IdentityPost, actor, role, peer, <aas2, pas>)@k &
                role = 'server' & pas = 'auth' & (#k < #i | #k = #i)
        )
      )"
!>)

define(<!lemma_matching_transcripts_posths!>, <!
lemma matching_transcripts_posths [reuse, heuristic=s]:
  "All tid tid2 actor peer actor2 peer2 role role2 rms rms2 messages #i #j.
    running(RMS, actor, role, peer2, rms, messages)@i &
    running2(RMS, peer, role2, actor2, rms2, messages)@j & not (role = role2) ==>
     rms = rms2"
!>)

define(<!lemma_matching_rms_posths!>, <!
lemma matching_rms_posths [reuse, heuristic=c]:
  "All tid tid2 actor peer actor2 peer2 role role2 rms messages messages2 #i #j.
    running(RMS, actor, role, peer2, rms, messages)@i &
    running2(RMS, peer, role2, actor2, rms, messages2)@j & not (role = role2) ==>
     messages = messages2"
!>)

define(<!lemma_matching_rms_actors!>, <!
lemma matching_rms_actors [reuse, heuristic=i]:
  "All tid tid2 actor peer actor2 peer2 role rms messages messages2 #i #j.
    running(RMS, actor, role, peer, rms, messages)@i &
    running2(RMS, actor2, role, peer2, rms, messages2)@j ==>
     actor = actor2 & tid = tid2"
!>)

define(<!lemma_matching_sessions!>, <!
lemma matching_sessions [reuse, use_induction, heuristic=s, hide_lemma=posths_rms]:
  "All tid tid2 actor actor2 role role2 peer peer2 rms messages #i #j #k.
    running(RMS, actor, role, peer2, rms, messages)@i & 
    running2(RMS, peer, role2, actor2, rms, messages)@j &
    not (role = role2) &
    KU(rms)@k ==>
      (Ex tid3 esk #r. RevEKemSk(tid3, actor, esk)@r & #r < #i) |
      (Ex tid4 esk #r. RevEKemSk(tid4, peer, esk)@r & #r < #j) |
      (Ex rms2 #r. RevealPSK(actor, rms2)@r & #r < #k) |
      (Ex rms2 #r. RevealPSK(peer, rms2)@r & #r < #k)"
!>)

define(<!lemma_post_master_secret!>, <!
lemma post_master_secret [reuse, hide_lemma=posths_rms]:
  "All tid actor peer role hs rms aas messages #i #k.
    running(PostHS, actor, role, hs, rms, peer, <aas, 'auth'>, messages)@i & 
    commit(HS, actor, role, hs)@i & 
    commit(IdentityPost, actor, role, peer, <aas, 'auth'>)@i &
    KU(rms)@k ==>
      (Ex #r. RevLtk(peer)@r & #r < #i) |
      (Ex tid3 esk #r. RevEKemSk(tid3, peer, esk)@r & #r < #i) |
      (Ex tid4 esk #r. RevEKemSk(tid4, actor, esk)@r & #r < #i) |
      (Ex rms2 #r. RevealPSK(actor, rms2)@r & #r < #k) |
      (Ex rms2 #r. RevealPSK(peer, rms2)@r & #r < #k)"
!>)

define(<!lemma_invariant_post_hs!>, <!
lemma invariant_post_hs [reuse, use_induction, hide_lemma=posths_rms]:
  "All tid actor peer peer2 role hs hs2 rms rms2 as as2 msgs msgs2 #i #j.
    running(PostHS, actor, role, hs, rms, peer, as, msgs)@i & 
    running(PostHS, actor, role, hs2, rms2, peer2, as2, msgs2)@j ==>
      peer = peer2 & rms = rms2 & msgs = msgs2 & hs = hs2"
!>)

/*
  LEMMAS USED IN LEMMA

*/


define(<!lemma_session_key_agreement!>, <!
lemma session_key_agreement [hide_lemma=sig_origin]:
  "All tid tid2 actor peer actor2 peer2 nonces keys keys2 cas as2 #i #j #k #l.
     SessionKey(tid, actor, peer2, <cas, 'auth'>, keys)@i & 
     running(Nonces, actor, 'client', nonces)@j &
     SessionKey(tid2, peer, actor2, as2, keys2)@k &
     running2(Nonces, peer, 'server', nonces)@l &
      // not (Ex #r. RevLtk(actor)@r & #r < #i) &
      not (Ex #r. RevLtk(peer)@r & #r < #i & #r < #k) &
      not (Ex tid3 esk #r. RevEKemSk(tid3, actor, esk)@r & #r < #i & #r < #k) &
      not (Ex rms #r. RevealPSK(actor, rms)@r & #r < #i & #r < #k) &
      not (Ex rms #r. RevealPSK(peer, rms)@r & #r < #i & #r < #k)
      ==>
       keys = keys2"
!>)


define(<!lemma_entity_authentication!>, <!
/*
  Unilateral (entity) authentication
*/
lemma entity_authentication [reuse, use_induction]:
  "All tid actor peer nonces cas #i. 
      commit(Nonces, actor, 'client', nonces)@i & commit(Identity, actor, 'client', peer, <cas, 'auth'>)@i &
      not (Ex #r. RevLtk(peer)@r & #r < #i) &
      not (Ex tid3 esk #r. RevEKemSk(tid3, actor, esk)@r & #r < #i) &
      not (Ex rms #r. RevealPSK(actor, rms)@r) &
      not (Ex rms #r. RevealPSK(peer, rms)@r)
          ==> (Ex tid2 #j. running2(Nonces, peer, 'server', nonces)@j & #j < #i)"
!>)

define(<!lemma_transcript_agreement!>, <!
/*
  Integrity of handshake messages
*/
lemma transcript_agreement [reuse]:
  "All tid actor peer transcript cas #i.
      commit(Transcript, actor, 'client', transcript)@i & commit(Identity, actor, 'client', peer, <cas, 'auth'>)@i &
      not (Ex #r. RevLtk(peer)@r & #r < #i) &
      not (Ex tid3 esk #r. RevEKemSk(tid3, actor, esk)@r & #r < #i) &
      not (Ex rms #r. RevealPSK(actor, rms)@r) &
      not (Ex rms #r. RevealPSK(peer, rms)@r)
          ==> (Ex tid2 #j. running2(Transcript, peer, 'server', transcript)@j & #j < #i)"
!>)

define(<!lemma_mutual_entity_authentication!>, <!
/*
  Mutual (entity) authentication
*/
lemma mutual_entity_authentication [reuse, use_induction]:
  "All tid actor peer nonces sas #i.
      commit(Nonces, actor, 'server', nonces)@i & commit(Identity, actor, 'server', peer, <sas, 'auth'>)@i &
      not (Ex #r. RevLtk(peer)@r & #r < #i) &
      not (Ex tid3 esk #r. RevEKemSk(tid3, peer, esk)@r & #r < #i) &
      not (Ex rms #r. RevealPSK(actor, rms)@r) &
      not (Ex rms #r. RevealPSK(peer, rms)@r)
          ==> (Ex tid2 #j. running2(Nonces, peer, 'client', nonces)@j & #j < #i)"
!>)

define(<!lemma_mutual_transcript_agreement!>, <!
/*
  Integrity of handshake messages
*/
lemma mutual_transcript_agreement [reuse]:
  "All tid actor transcript peer sas #i.
      commit(Transcript, actor, 'server', transcript)@i & commit(Identity, actor, 'server', peer, <sas, 'auth'>)@i & 
      not (Ex #r. RevLtk(peer)@r & #r < #i) &
      not (Ex tid3 esk #r. RevEKemSk(tid3, peer, esk)@r & #r < #i) &
      not (Ex rms #r. RevealPSK(actor, rms)@r) &
      not (Ex rms #r. RevealPSK(peer, rms)@r)
          ==> (Ex tid2 #j. running2(Transcript, peer, 'client', transcript)@j & #j < #i)"
!>)


define(<!lemma_mutual_injective_entity_authentication!>, <!
/*
  Mutual (entity) authentication
*/
lemma injective_mutual_entity_authentication [reuse, hide_lemma=posths_rms]:
  "All tid actor peer role nonces aas #i.
      commit(Nonces, actor, role, nonces)@i & commit(Identity, actor, role, peer, <aas, 'auth'>)@i &
      not (Ex #r. RevLtk(peer)@r & #r < #i) &
      not (Ex tid3 esk #r. RevEKemSk(tid3, peer, esk)@r & #r < #i) &
      not (Ex tid4 esk #r. RevEKemSk(tid4, actor, esk)@r & #r < #i) &
      not (Ex rms #r. RevealPSK(actor, rms)@r) &
      not (Ex rms #r. RevealPSK(peer, rms)@r)
          ==> 
          Ex role2 tid2 #j. running2(Nonces, peer, role2, nonces)@j & #j < #i & not role = role2 &
          (All tid3 peer2 #k. running3(Nonces, peer2, role2, nonces)@k ==> #k = #j)"
!>)