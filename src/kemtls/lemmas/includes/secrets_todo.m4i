/*
If the adversary knows AHS or MS while we've commited to having authenticated the peer,
the adversary must have revealed Ltk and known HS before learning AHS.
(Possibly after committing, because they might reveal LTK after committing and used RevEKemSk to learn hs).

This last part is a change from the original model, which restricted RevLtk before commit.
*/


// to know the server's ahs for an authenticated client, the client's LTK must have
// been revealed (to impersonate the client).
// Alternatively, the ephemeral key and long-term key of the server have been revealed.
// This also lets the adversary derive the AHS without calling RevLtk
lemma authenticated_handshake_secret_server [
                                      hide_lemma=ku_encaps, hide_lemma=ku_decaps, hide_lemma=ku_ahs,
                                      hide_lemma=ku_extract, hide_lemma=ku_expand,
                                      hide_lemma=matching_nonces, hide_lemma=invariant_nonces, hide_lemma=consistent_nonces,
                                      heuristic=O "oracles/authenticated_handshake_secret.py"]:
    "All tid actor peer ahs #i #k.
        commit(AHS, actor, 'server', ahs)@#i &
        commit(Identity, actor, 'server', peer, <'auth', 'auth'>)@#i &
        KU(ahs)@k ==>
            (Ex tid2 esk #a #e.
                RevLtk(actor)@#a & 
                RevEKemSk(tid2, peer, esk)@#e & 
                #e < #i & 
                #a < #k
            ) |
            (Ex #r. RevLtk(peer)@r & (#r < #k | #r < #i))"


lemma authenticated_handshake_secret [reuse]: 
    "All tid actor role peer ahs aas #i #k.
        commit(AHS, actor, role, ahs)@#i &
        commit(Identity, actor, role, peer, <aas, 'auth'>)@#i &
        KU(ahs)@#k ==>
            (Ex #a. RevLtk(actor)@#a & #a < #k) |
            (Ex tid2 esk #eskcl. (role = 'server' & RevEKemSk(tid2, peer, esk)@#eskcl & #eskcl < #i)) |
            (Ex #r. RevLtk(peer)@#r & (#r < #k | #r < #i))"
ifdef(<!TODO!>, <!

// To learn the handshake secret in an authed connection, the adversary needs to
// either impersonate the peer (RevLtk), or reveal it.
lemma handshake_secret [reuse, use_induction, hide_lemma=posths_rms_weak, heuristic=i]:
  "All tid actor peer role hs aas #i #k.
    commit(HS, actor, role, hs)@i &
    commit(Identity, actor, role, peer, <aas, 'auth'>)@i &
    KU(hs)@k ==>
        (Ex #l. RevLtk(peer)@l & #l < #i) |                         // for impersonation
        (Ex tid3 esk #p. RevEKemSk(tid3, peer, esk)@p & #p < #i)  | // if the peer is client
        (Ex tid4 esk #r. RevEKemSk(tid4, actor, esk)@r & #r < #i)   // if the actor is client
        ifdef(<!PSK!>, <! 
        |
        (Ex rms #r. RevealPSK(actor, rms)@r & #r < #k) |
        (Ex rms #r. RevealPSK(peer, rms)@r & #r < #k)
        !>)
        "


lemma authenticated_handshake_secret_pfs [reuse]: 
    "All tid actor role peer ahs aas #i #k.
        commit(AHS, actor, role, ahs)@#i &
        commit(Identity, actor, role, peer, <aas, 'auth'>)@#i &
        not (Ex #ar. RevLtk(actor)@#ar & #ar < #i) &
        not (Ex #pr. RevLtk(peer)@#pr & #pr < #i) &
        KU(ahs)@k
        ==>
            (Ex tid esk #e. RevEKemSk(tid, actor, esk)@#e & #e < #i) |
            (Ex tid2 esk2 #e2. RevEKemSk(tid2, peer, esk2)@#e2 & #e2 < #i)" 

lemma handshake_secret_pfs [reuse]:
    "All tid actor role peer hs aas #i #k.
        commit(HS, actor, role, hs)@i &
        commit(Identity, actor, role, peer, <aas, 'auth'>)@i &  
        not (Ex #r. RevLtk(actor)@#r & #r < #i) &
        not (Ex #r. RevLtk(peer)@#r & #r < #i) &
        KU(hs)@k ==>
            (Ex tid2 esk #ec. RevEKemSk(tid2, actor, esk)@ec & #ec < #k) | 
            (Ex tid3 esk2 #ec. RevEKemSk(tid3, peer, esk2)@ec & #ec < #k)"

// If the RevLtk was done after committing, then the adversary must also have 
// RevEKemSk'd to obtain the ephemeral keys.
lemma master_secret_pfs [reuse, use_induction]:
    "All tid actor role peer ms aas #i #k #r.
        commit(MS, actor, role, ms)@#i &
        commit(Identity, actor, role, peer, <aas, 'auth'>)@#i &
        KU(ms)@#k &
        RevLtk(peer)@#r & 
        #i < #r
        ==>
            (Ex esk #a. RevEKemSk(tid, actor, esk)@#a & #a < #i) |
            (Ex tid2 esk2 #b. RevEKemSk(tid2, peer, esk2)@#b & #b < #i)"

lemma senddata_secret [reuse]:
  "All tid actor peer aas data #send #kudata.
    SendData(tid, actor, peer, <aas, 'auth'>, data)@#send &
    KU(data)@#kudata
    ==>
    (Ex #rev. RevLtk(peer)@#rev & #rev < #kudata)
  "

lemma senddata_secret_pfs [reuse]:
  "All tid actor peer aas data #send #kudata.
    SendData(tid, actor, peer, <aas, 'auth'>, data)@#send &
    not (Ex #ltk. RevLtk(peer)@#ltk & #ltk < #send) &
    KU(data)@#kudata
    ==>
    (
      (Ex esk #epha. RevEKemSk(tid, actor, esk)@#epha & #epha < #send) |
      (Ex tid2 esk #ephp. RevEKemSk(tid2, peer, esk)@#ephp  & #ephp < #send)
    )
  "
!>)