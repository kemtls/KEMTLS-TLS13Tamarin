lemma_cert_req_origin/* [typing]:
  "All certificate_request_context certificate_extensions keys #i.
    KU(senc{handshake_record('13', certificate_request_context, certificate_extensions)}keys)@i ==> 
      (Ex #j. KU(certificate_request_context)@j & #j < #i) |
      (Ex #j tid actor role. running(CertReqCtxt, actor, role, certificate_request_context)@j & #j < #i)"
*/

lemma_nst_source/* [typing]:
  "All ticket ticket_age_add tkt_lt tkt_exts app_key #i.
    KU(senc{handshake_record('4', tkt_lt, ticket_age_add, ticket, tkt_exts)}app_key)@i ==>
      (Ex #j #k. KU(ticket)@j & KU(ticket_age_add)@k & #j < #i & #k < #i) |
      (Ex tid S #j. running_server(NST, ticket, ticket_age_add)@j & #j < #i)"
*/

lemma ekem_source [sources, heuristic=s]:
  "All tid esk actor #j.
    RevEKemSk(tid, actor, esk)@j 
    ==> 
      (Ex #i. EKem(tid, actor, esk)@i & #i < #j)"

lemma revltk_source [sources, heuristic=s]:
  "All a #j.
    RevLtk(a)@j ==> Ex ltk #i. GenLtk(a, ltk)@i & #i < #j"

ifdef(<!PSK!>, <!
lemma revpsk_source [sources]:
  "All a psk #k. 
    RevealPSK(actor, psk)@#k ==> Ex ticket #j. (FreshPSK(ticket,psk)@#j & #j < #k)"
!>, <!
dnl lemma revpsk_source [sources]:
dnl  "All a psk #k. 
dnl    RevealPSK(a, psk)@#k ==> F"
!>)

lemma ephemeral_isnt_ltk [sources, heuristic=s]:
  "All tid actor actor2 esk #i #j.
    EKem(tid, actor, esk)@#i & GenLtk(actor2, esk)@#j ==> F"

lemma kemencapsulation_origin [sources, heuristic=s]:
  "All kem ciphertext ss pk keys #i. 
    KU(senc{KemEncapsulation}keys)@i &
    ciphertext = kemencaps(kem, ss, pk)
    ==>
      (Ex #j. KU(ss)@j & #j < #i) |
      (Ex #j. KemEncap(kem, pk, ss)@j & #j < #i)"

lemma kemencap_source [sources, heuristic=c]:
  "All kem pk sk ss #j.
    pk = kempk(kem, sk) &
    KemEncap(kem, pk, ss)@j
    ==>
      (Ex #i. KU(sk)@i & #i < #j) | 
      (Ex tid a #i. EKem(tid, a, sk)@i & #i < #j) | 
      (Ex a #i. GenLtk(a, sk)@i & #i < #j)"

lemma kemencap_source_pk [sources, heuristic=s]:
  "All kem certificate sk ss #j.
    certificate = kempk(kem, sk) &
    KemEncap(kem, certificate, ss)@j
    ==>
      (Ex #ch. (KU(Extension('40', kem, certificate))@#ch & #ch < #j)) |
      (Ex certificate_request_context keys #crt. KU(senc{Certificate}keys)@#crt & #crt < #j)"

lemma kemdecap_source_ct [sources, heuristic=s]:
  "All kem ciphertext sk ss #j.
    KemDecaps(kem, sk, ss)@j &
    ciphertext = kemencaps(kem, ss, kempk(kem, sk))
    ==>
      (Ex #sh. KU(Extension('40', kem, ciphertext))@#sh & #sh < #j) |
      (Ex  keys #enc. KU(senc{KemEncapsulation}keys)@#enc & #enc < #j)"

lemma kemdecap_source_sk [heuristic=c]:
  "All kem sk ss #j.
    KemDecaps(kem, sk, ss)@j
    ==>
      (Ex tid a #i. EKem(tid, a, sk)@i & #i < #j) |
      (Ex a #l. GenLtk(a, sk)@l & #l < #j)"

lemma client_finished_running [sources, heuristic=s]:
    "
    All keys verify_data ms messages #fin.
    verify_data = compute_finished(client) &
    KU(senc{Finished}keys)@#fin
    ==>
        (Ex #kms #msgs. KU(ms)@#kms & KU(messages)@#msgs & #kms < #fin & #msgs < #fin) |
        (Ex tid actor #run. running(Transcript, actor, 'client', messages)@#run)
    "

lemma server_finished_running [sources, heuristic=s]:
    "
    All keys verify_data ms messages #fin.
    verify_data = compute_finished(server) &
    KU(senc{Finished}keys)@#fin
    ==>
        (Ex #kms #msgs. KU(ms)@#kms & KU(messages)@#msgs & #kms < #fin & #msgs < #fin) |
        (Ex tid actor #run. running(Transcript, actor, 'server', messages)@#run)
    "

lemma source_recvstream [sources]:
  "All tid actor peer auth_status data #recv.
    RecvData(tid, actor, peer, auth_status, data)@#recv
    ==>
      (Ex #pred. Recv(tid)@#pred & #pred < #recv) |
      (Ex #creac. C3b(tid)@#creac & #creac < #recv) |
      (Ex #sfin. S3fin(tid)@#sfin & #sfin < #recv)
  "

dnl vim: set ft=spthy ts=4 sw=4 tw=0 et :
