/*
If the adversary knows AHS or MS while we've commited to having authenticated the peer,
the adversary must have revealed Ltk and known HS before learning AHS.
(Possibly after committing, because they might reveal LTK after committing and used RevEKemSk to learn hs).

This last part is a change from the original model, which restricted RevLtk before commit.
*/

// not reuse because it seems to hinder other lemmas
lemma commit_means_other_side_mutual [use_induction, heuristic=O "oracles/commit_means_other_side_mutual.py"]:
    "All tid actor role peer #comm.
        commit(Identity, actor, role, peer, <'auth', 'auth'>)@#comm &
        not (Ex #rev. RevLtk(peer)@#rev & #rev < #comm)
        ==>
            Ex role2 tid2 #peer. (
                not (role = role2) &
                running2(Identity, peer, role2, actor, <'auth', 'auth'>)@#peer &
                #peer < #comm
            )" 

// To know the master secret for an authenticated peer, the peer's ltk
// must have been revealed. The ahs key needs to also be known, so either
// the adversary must impersonate the peer or it will have to stategically
// have done RevEKemSk.
lemma master_secret [reuse, use_induction, heuristic=cic]:
    "All tid actor role peer ms aas #i #k.
        commit(MS, actor, role, ms)@#i &
        commit(Identity, actor, role, peer, <aas, 'auth'>)@#i &
        KU(ms)@k ==>
            (Ex #r. RevLtk(peer)@#r & #r < #k)"

// to know the AHS key for an authenticated server, the
// server's ltk must've been revealed (to impersonate the server, because it needs to know HS as well).
lemma authenticated_handshake_secret_client [reuse, heuristic=cic]:
    "All tid actor peer ahs aas #i #k.
        commit(AHS, actor, 'client', ahs)@#i &
        commit(Identity, actor, 'client', peer, <aas, 'auth'>)@#i &
        KU(ahs)@k ==>
            (Ex #r. RevLtk(peer)@r & (#r < #k | #r < #i))"
