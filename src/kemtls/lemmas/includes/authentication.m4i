/*
  Unilateral (entity) authentication
*/
lemma entity_authentication [reuse, use_induction]:
  "All tid actor peer nonces cas #i. 
      commit(Nonces, actor, 'client', nonces)@i & 
      commit(Identity, actor, 'client', peer, <cas, 'auth'>)@i &
      not (Ex #r. RevLtk(peer)@r & #r < #i)
      ifdef(<!PSK!>, <! &
      not (Ex rms #r. RevealPSK(actor, rms)@r) &
      not (Ex rms #r. RevealPSK(peer, rms)@r)
      !>)
          ==> (Ex tid2 #j_ea. running2(Nonces, peer, 'server', nonces)@j_ea & #j_ea < #i)"

/*
  Integrity of handshake messages
*/
lemma transcript_agreement [reuse,
    heuristic=O "oracles/transcript_agreement.py"]:
  "All tid actor peer transcript cas #i.
      commit(Transcript, actor, 'client', transcript)@i & commit(Identity, actor, 'client', peer, <cas, 'auth'>)@i &
      not (Ex #r. RevLtk(peer)@r & #r < #i)
      ifdef(<!PSK!>, <! 
      &
      not (Ex rms #r. RevealPSK(actor, rms)@r) &
      not (Ex rms #r. RevealPSK(peer, rms)@r)
      !>)
          ==> (Ex tid2 #j1. running2(Transcript, peer, 'server', transcript)@#j1 & #j1 < #i)"

/*
  Mutual (entity) authentication
*/
lemma mutual_entity_authentication [
      hide_lemma=authenticated_handshake_secret_server,
      hide_lemma=handshake_secret,
      hide_lemma=handshake_secret_pfs,
      hide_lemma=kem_chal_dual,
      hide_lemma=kem_chal_dual_ephem,
      hide_lemma=kem_chal_dual_server,
      hide_lemma=kem_chal_dual_server,
      hide_lemma=authenticated_handshake_secret,
      reuse]:
  "All tid actor peer nonces sas #i.
      commit(Nonces, actor, 'server', nonces)@i & 
      commit(Identity, actor, 'server', peer, <sas, 'auth'>)@i &
      not (Ex #r. RevLtk(peer)@r & #r < #i)
      ifdef(<!PSK!>, <! &
      not (Ex rms #r. RevealPSK(actor, rms)@r) &
      not (Ex rms #r. RevealPSK(peer, rms)@r)
      !>)
          ==> (Ex tid2 #j_mea. running2(Nonces, peer, 'client', nonces)@#j_mea & #j_mea < #i)"

/*
  Integrity of handshake messages
*/
lemma mutual_transcript_agreement [reuse,
      hide_lemma=authenticated_handshake_secret_server,
      hide_lemma=handshake_secret,
      hide_lemma=handshake_secret_pfs,
      hide_lemma=kem_chal_dual,
      hide_lemma=kem_chal_dual_ephem,
      hide_lemma=kem_chal_dual_client,
      hide_lemma=kem_chal_dual_server,
      hide_lemma=authenticated_handshake_secret,
      heuristic=O "oracles/transcript_agreement.py"]:
  "All tid actor transcript peer sas #i.
      commit(Transcript, actor, 'server', transcript)@i & commit(Identity, actor, 'server', peer, <sas, 'auth'>)@i & 
      not (Ex #r. RevLtk(peer)@r & #r < #i)
      ifdef(<!PSK!>, <!
      &
      not (Ex rms #r. RevealPSK(actor, rms)@r) &
      not (Ex rms #r. RevealPSK(peer, rms)@r)
      !>)
          ==> (Ex tid2 #j_mta. running2(Transcript, peer, 'client', transcript)@#j_mta & #j_mta < #i)"

/*
  Mutual (entity) authentication
*/
lemma injective_mutual_entity_authentication [reuse, hide_lemma=posths_rms]:
  "All tid actor peer role nonces aas #i.
      commit(Nonces, actor, role, nonces)@i & commit(Identity, actor, role, peer, <aas, 'auth'>)@i &
      not (Ex #r. RevLtk(peer)@r & #r < #i) &
      not (Ex tid3 esk #r. RevEKemSk(tid3, peer, esk)@r & #r < #i) &
      not (Ex tid4 esk #r. RevEKemSk(tid4, actor, esk)@r & #r < #i) 
      ifdef(<!PSK!>, <!
      &
      not (Ex rms #r. RevealPSK(actor, rms)@r) &
      not (Ex rms #r. RevealPSK(peer, rms)@r)
      !>)
          ==> 
          Ex role2_imea tid2 #j. 
            running2(Nonces, peer, role2_imea, nonces)@j & #j < #i & 
            not role = role2_imea &
            (All tid3 peer2 #k. running3(Nonces, peer2, role2_imea, nonces)@k ==> #k = #j)"
