/*******
  KEM LEMMAS
*/
// sanity check

lemma ekem_pk_can_be_decapsed:
  exists-trace
  "Ex tid a esk ekem ess #i #j.
     EKem(tid, a, esk)@#i
     & Ephem_KemDecaps(ekem, esk, ess)@#j
     & not (Ex #r. RevEKemSk(tid, a, esk)@#r & #r < #j)"

lemma ekem_sk_can_be_revealed:
  exists-trace
  "Ex tid a esk #i #j.
    EKem(tid, a, esk)@#i & RevEKemSk(tid, a, esk)@#j & #i < #j"

// unique
lemma one_ekem_per_esk [reuse, heuristic=C]:
  "All tid tid2 esk a a2 #i #j.
    EKem(tid, a, esk)@i & EKem(tid2, a2, esk)@j ==>
      #i = #j & a = a2 & tid = tid2"


//NTS: RevDH < RRMS
//May have to add tid's to RevDH.
// ordering
lemma ekem_rev_secret_ordering [reuse, heuristic=C]:
  "All esk tid a #i #j.
    RevEKemSk(tid, a, esk)@#i & EKem(tid, a, esk)@#j ==> #j < #i"

lemma ekem_only_revsk_in_client [reuse, heuristic=s]:
    "
    All tid a esk #i #j.
    EKem(tid, a, esk)@#i & RevEKemSk(tid, a, esk)@#j
    ==> (
      (Ex #r. Start(tid, a, 'client')@#r & #r < #j) &
      not (Ex #r. Start(tid, a, 'server')@#r)
    )
    "

lemma rev_ekem_ordering  [reuse, use_induction, heuristic=C]:
  "All tid actor esk #j.
    DelEKemSk(tid, actor, esk)@#j ==>
      ((Ex #i. EKem(tid, actor, esk)@#i & #i < #j) &
       (All #r. RevEKemSk(tid, actor, esk)@#r  ==>  #r < #j))"

lemma rev_ekem_before_hs  [reuse, heuristic=I]:
  "All tid actor role hs esk #i #j.
    running(HS, actor, role, hs)@j &
    RevEKemSk(tid, actor, esk)@i ==>
    #i < #j"

// requirements
lemma ekem_esk_can_only_be_revealed [heuristic=c]:
  "All tid a esk #i #j.
    (EKem(tid, a, esk)@#i & KU(esk)@#j)
    ==> (Ex #r. RevEKemSk(tid, a, esk)@#r & #r < #j)"

lemma ekem_ss_needs_rev_esk [reuse, heuristic=i]:
    "All a tid ekem esk ess #a #i #j.
    (EKem(tid, a, esk)@#a & Ephem_KemEncap(ekem, Ephem_kempk(ekem, esk), ess)@#i & KU(ess)@#j)
      ==> (Ex #r. RevEKemSk(tid, a, esk)@#r & #r < #j)"

lemma kem_getting_ss_requires_sk_ephem [heuristic=i]:
  "All kem sk ss #i #j.
    (Ephem_KemEncap(kem, Ephem_kempk(kem, sk), ss)@#i & KU(ss)@#j)
    ==>
    Ex #r. KU(sk)@#r & #r < #j"

ifdef(<!SPLIT_KEM!>, <!
lemma kem_getting_ss_requires_sk_client [heuristic=i]:
  "All kem sk ss #i #j.
    (Client_KemEncap(kem, Client_kempk(kem, sk), ss)@#i & KU(ss)@#j)
    ==>
    Ex #r. KU(sk)@#r & #r < #j"

lemma kem_getting_ss_requires_sk_server [heuristic=i]:
  "All kem sk ss #i #j.
    (Server_KemEncap(kem, Server_kempk(kem, sk), ss)@#i & KU(ss)@#j)
    ==>
    Ex #r. KU(sk)@#r & #r < #j"
!>)

// static KEM
lemma skem_getting_ss_requires_reveal_client [heuristic=i]:
  "All a kem ltk ss #a #i #j.
  (GenLtk(a, ltk)@#a & Client_KemEncap(kem, Client_kempk(kem, ltk), ss)@#i & KU(ss)@#j)
  ==>
  (Ex #r. RevLtk(a)@#r & #r < #j)"

// static KEM
ifdef(<!SPLIT_KEM!>, <!
lemma skem_getting_ss_requires_reveal_server [heuristic=i]:
  "All a kem ltk ss #a #i #j.
  (GenLtk(a, ltk)@#a & Server_KemEncap(kem, Server_kempk(kem, ltk), ss)@#i & KU(ss)@#j)
  ==>
  (Ex #r. RevLtk(a)@#r & #r < #j)"  
!>)

// Ordering of the shared secret
// this one seems necessary
lemma rev_kem_seed_ordering_ephem [reuse, heuristic=i]:
  "All kem pk ss #i #j.
    Ephem_KemEncap(kem, pk, ss)@i & KU(ss)@j ==> #i < #j"

ifdef(<!SPLIT_KEM!>, <!
lemma rev_kem_seed_ordering_client [reuse, heuristic=i]:
  "All kem pk ss #i #j.
    Client_KemEncap(kem, pk, ss)@i & KU(ss)@j ==> #i < #j"

lemma rev_kem_seed_ordering_server [reuse, heuristic=i]:
  "All kem pk ss #i #j.
    Server_KemEncap(kem, pk, ss)@i & KU(ss)@j ==> #i < #j"
!>)

lemma kem_consistency_ephem [heuristic=s]:
  "All kem pk ss #i.
    Ephem_KemEncap(kem, pk, ss)@i
    ==>
      (Ex sk. pk = Ephem_kempk(kem, sk)) &
      (Ex seed. ss = Ephem_kemss(kem, seed))"

ifdef(<!SPLIT_KEM!>, <!
lemma kem_consistency_client [heuristic=s]:
  "All kem pk ss #i.
    Client_KemEncap(kem, pk, ss)@i
    ==>
      (Ex sk. pk = Client_kempk(kem, sk)) &
      (Ex seed. ss = Client_kemss(kem, seed))"

lemma kem_consistency_server [heuristic=s]:
  "All kem pk ss #i.
    Server_KemEncap(kem, pk, ss)@i
    ==>
      (Ex sk. pk = Server_kempk(kem, sk)) &
      (Ex seed. ss = Server_kemss(kem, seed))"
!>)

lemma kem_consistency_decaps_ephem [heuristic=s]:
  "All kem sk ss #i.
    Ephem_KemDecaps(kem, sk, ss)@i
    ==>
      (Ex seed. ss = Ephem_kemss(kem, seed))"

ifdef(<!SPLIT_KEM!>, <!
lemma kem_consistency_decaps_server [heuristic=s]:
  "All kem sk ss #i.
    Server_KemDecaps(kem, sk, ss)@i
    ==>
      (Ex seed. ss = Server_kemss(kem, seed))"

lemma kem_consistency_decaps_client [heuristic=s]:
  "All kem sk ss #i.
    Client_KemDecaps(kem, sk, ss)@i
    ==>
      (Ex seed. ss = Client_kemss(kem, seed))"
!>)

lemma kem_consistency_chal_ephem [reuse, heuristic=c]:
  "All kem sk pk ct ss #i.
    Ephem_KemChal(kem, sk, pk, ct, ss)@#i
    ==>
      pk = Ephem_kempk(kem, sk) &
      ct = Ephem_kemencaps(kem, ss, pk) &
      (Ex seed. ss = Ephem_kemss(kem, seed))"

ifdef(<!SPLIT_KEM!>, <!
lemma kem_consistency_chal_client [reuse, heuristic=c]:
  "All kem sk pk ct ss #i.
    Client_KemChal(kem, sk, pk, ct, ss)@#i
    ==>
      pk = Client_kempk(kem, sk) &
      ct = Client_kemencaps(kem, ss, pk) &
      (Ex seed. ss = Client_kemss(kem, seed))"

lemma kem_consistency_chal_server [reuse, heuristic=c]:
  "All kem sk pk ct ss #i.
    Server_KemChal(kem, sk, pk, ct, ss)@#i
    ==>
      pk = Server_kempk(kem, sk) &
      ct = Server_kemencaps(kem, ss, pk) &
      (Ex seed. ss = Server_kemss(kem, seed))"
!>)

lemma kem_encaps_unique_ephem [reuse, heuristic=c]:
  "All kem pk pk2 ss #i #j.
    Ephem_KemEncap(kem, pk, ss)@#i &
    Ephem_KemEncap(kem, pk2, ss)@#j
    ==>
    #i = #j"

ifdef(<!SPLIT_KEM!>, <!
lemma kem_encaps_unique_client [reuse, heuristic=c]:
  "All kem pk pk2 ss #i #j.
    Client_KemEncap(kem, pk, ss)@#i &
    Client_KemEncap(kem, pk2, ss)@#j
    ==>
    #i = #j"

lemma kem_encaps_unique_server [reuse, heuristic=c]:
  "All kem pk pk2 ss #i #j.
    Server_KemEncap(kem, pk, ss)@#i &
    Server_KemEncap(kem, pk2, ss)@#j
    ==>
    #i = #j"
!>)

// manually proves; guide it through as many kemencaps() operations as possible.
// oracle handles this for us.
lemma kem_encaps_ordering [reuse, heuristic=o "oracles/kem_encaps_ordering.py"]:
  "All kem pk sk ss #i #j.
    Ephem_KemEncap(kem, pk, ss)@i &
    Ephem_KemDecaps(kem, sk, ss)@j &
    pk = Ephem_kempk(kem, sk)
    ==>
    #i < #j"

ifdef(<!SPLIT_KEM!>, <!
lemma kem_encaps_ordering_server [reuse, heuristic=o "oracles/kem_encaps_ordering.py"]:
  "All kem pk sk ss #i #j.
    Server_KemEncap(kem, pk, ss)@i &
    Server_KemDecaps(kem, sk, ss)@j &
    pk = Server_kempk(kem, sk)
    ==>
    #i < #j"

lemma kem_encaps_ordering_client [reuse, heuristic=o "oracles/kem_encaps_ordering.py"]:
  "All kem pk sk ss #i #j.
    Client_KemEncap(kem, pk, ss)@i &
    Client_KemDecaps(kem, sk, ss)@j &
    pk = Client_kempk(kem, sk)
    ==>
    #i < #j"
!>)

// this doesn't hold for static keys, as it's easy to
// make the decapsing party decaps the same ct twice by
// repeating the ciphertext
lemma kem_ephemeral_decaps_unique [heuristic=s]:
  "All tid a kem sk ss #k #i #j.
    EKem(tid, a, sk)@#k &
    Ephem_KemDecaps(kem, sk, ss)@#i &
    Ephem_KemDecaps(kem, sk, ss)@#j
    ==>
    #i = #j"

// chal_dual
ifdef(<!SPLIT_KEM!>, <!
lemma kem_chal_dual_ephem [reuse]:
  "All tid tid2 actor actor2 kem sk pk ct ss #i #j #r.
    Ephem_KemChal(kem, sk, pk, ct, ss)@#i & Instance(tid, actor, 'client')@#i &
    Ephem_KemChal(kem, sk, pk, ct, ss)@#j & Instance(tid2, actor2, 'server')@#j &
    KU(ss)@#r
    ==>
    (Ex #kg #p. (EKem(tid, actor, sk)@#kg & RevEKemSk(tid, actor, sk)@#p & #p < #r))"

lemma kem_chal_dual_server [reuse]:
  "All tid tid2 actor actor2 kem sk pk ct ss #i #j #r.
    Server_KemChal(kem, sk, pk, ct, ss)@#i & Instance(tid, actor, 'client')@#i &
    Server_KemChal(kem, sk, pk, ct, ss)@#j & Instance(tid2, actor2, 'server')@#j &
    KU(ss)@#r
    ==>
    (Ex #kg #s. (GenLtk(actor2, sk)@#kg & RevLtk(actor2)@#s & #s < #r))"

lemma kem_chal_dual_client [reuse]:
  "All tid tid2 actor actor2 kem sk pk ct ss #i #j #r.
    Client_KemChal(kem, sk, pk, ct, ss)@#i & Instance(tid, actor, 'client')@#i &
    Client_KemChal(kem, sk, pk, ct, ss)@#j & Instance(tid2, actor2, 'server')@#j &
    KU(ss)@#r
    ==>
    (Ex #kg #c. (GenLtk(actor, sk)@#kg & RevLtk(actor)@#c & #c < #r))"

!>,<!
lemma kem_chal_dual [reuse]:
  "All tid tid2 actor actor2 kem sk pk ct ss #i #j #r.
    KemChal(kem, sk, pk, ct, ss)@#i & Instance(tid, actor, 'client')@#i &
    KemChal(kem, sk, pk, ct, ss)@#j & Instance(tid2, actor2, 'server')@#j &
    KU(ss)@#r
    ==>
    (Ex #kg #p. (EKem(tid, actor, sk)@#kg & RevEKemSk(tid, actor, sk)@#p & #p < #r)) |
    (Ex #kg #c. (GenLtk(actor, sk)@#kg & RevLtk(actor)@#c & #c < #r))  |
    (Ex #kg #s. (GenLtk(actor2, sk)@#kg & RevLtk(actor2)@#s & #s < #r))"
!>)