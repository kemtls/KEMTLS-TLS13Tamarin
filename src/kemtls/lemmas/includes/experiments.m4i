// not sure if proves
lemma no_auth_implies_cert_was_not_sent [
    hide_lemma=kem_chal_dual]:
  "All tid tid2 actor peer aas nonces #t1 #t2.
    commit(Identity, actor, 'server', peer, <aas, '0'>)@#t1 &
    commit(Nonces, actor, 'server', nonces)@#t1 &
    commit2(Nonces, peer, 'client', nonces)@#t2
    ==>
      (not (Ex #recvcrt. S3_cert(tid)@#recvcrt & #recvcrt < #t1)) & (
        (not (Ex #sendcert. C3_cert(tid2)@#sendcert & #sendcert < #t1)) | 
        (Ex #revclcrt. RevLtk(actor)@#revclcrt)
      )"


lemma matching_nonces_requires_matching_transcripts [
      hide_lemma=authenticated_handshake_secret_server,
      hide_lemma=handshake_secret,
      hide_lemma=handshake_secret_pfs,
      hide_lemma=kem_chal_dual,
      hide_lemma=authenticated_handshake_secret,
      hide_lemma=entity_authentication,
      hide_lemma=mutual_entity_authentication,
      hide_lemma=injective_mutual_entity_authentication,
      hide_lemma=transcript_agreement,
      hide_lemma=mutual_transcript_agreement,
      hide_lemma=authenticated_handshake_secret_pfs,
      hide_lemma=ku_extract,
      hide_lemma=master_secret,
      hide_lemma=master_secret_pfs,
      heuristic=o "oracles/matching_nonces_requires_matching_transcripts.py"]:
  "All tid tid2 actor peer nonces #i #ii.
      commit(Nonces, actor, 'server', nonces)@#i &
      commit2(Nonces, peer, 'client', nonces)@#ii
      ==>
      (Ex transcript #j #jj.
            running(Transcript, actor, 'server', transcript)@#j & dnl #j < #jj &
            commit2(Transcript, peer, 'client', transcript)@#jj dnl & #jj = #ii
      ) |
      (Ex #rs. RevLtk(actor)@#rs) | dnl & #rs < #ii) |
      (Ex #rc. RevLtk(peer)@#rc) dnl & #rc < #ii)
  "

lemma cert_reception_matches_nonces [
      hide_lemma=authenticated_handshake_secret,
      hide_lemma=authenticated_handshake_secret_pfs,
      hide_lemma=kem_chal_dual,
      hide_lemma=entity_authentication,
      hide_lemma=mutual_entity_authentication,
      hide_lemma=injective_mutual_entity_authentication,
      hide_lemma=transcript_agreement,
      hide_lemma=mutual_transcript_agreement,
      hide_lemma=handshake_secret,
      hide_lemma=handshake_secret_pfs,
      hide_lemma=master_secret,
      hide_lemma=master_secret_pfs]:
  "All tid tid2 actor peer nonces #i #ii.
    commit(Nonces, actor, 'server', nonces)@#i &
    commit2(Nonces, peer, 'client', nonces)@#ii &
    not (Ex #rs. RevLtk(actor)@#rs & #rs < #ii) &
    not (Ex #rc. RevLtk(peer)@#rc & #rc < #ii)
    ==>
      (Ex #sendcrt #recvcrt. C3_cert(tid2)@#sendcrt & S3_cert(tid)@#recvcrt) |
      ((not Ex #sendcrt. C3_cert(tid2)@#sendcrt) & not (Ex #recvcrt. S3_cert(tid)@#recvcrt))
  "


lemma not_received_cert_was_not_sent:
  "All tid tid2 actor peer nonces #i #ii.
    commit(Nonces, actor, 'server', nonces)@#i &
    not (Ex #recvcrt. S3_cert(tid)@#recvcrt) &
    commit2(Nonces, peer, 'client', nonces)@#ii &
    not (Ex #rs. RevLtk(actor)@#rs & #rs < #ii) &
    not (Ex #rc. RevLtk(peer)@#rc & #rc < #ii)
    ==>
      not (Ex #sendcrt. C3_cert(tid2)@#sendcrt)
  "

lemma not_sent_cert_is_not_received:
  "All tid tid2 actor peer nonces #i #ii.
    commit(Nonces, actor, 'client', nonces)@#i &
    not (Ex #j. C3_cert(tid)@#j) &
    commit2(Nonces, peer, 'server', nonces)@#ii &
    not (Ex #rs. RevLtk(actor)@#rs & #rs < #ii) &
    not (Ex #rc. RevLtk(peer)@#rc & #rc < #ii)
    ==>
      not (Ex #recvcrt. S3_cert(tid2)@#recvcrt)
  "

lemma sent_cert_is_received:
  "All tid tid2 actor peer nonces #i #j #ii.
    commit(Nonces, actor, 'client', nonces)@#i &
    C3_cert(tid)@#j &
    commit2(Nonces, peer, 'server', nonces)@#ii &
    not (Ex #rs. RevLtk(actor)@#rs & #rs < #ii) &
    not (Ex #rc. RevLtk(peer)@#rc & #rc < #ii)
    ==>
      Ex #recvcrt. S3_cert(tid2)@#recvcrt
  "

lemma received_cert_was_sent:
  "All tid tid2 actor peer nonces #i #j #ii.
    commit(Nonces, actor, 'server', nonces)@#i &
    S3_cert(tid)@#j &
    commit2(Nonces, peer, 'client', nonces)@#ii &
    not (Ex #rs. RevLtk(actor)@#rs & #rs < #ii) &
    not (Ex #rc. RevLtk(peer)@#rc & #rc < #ii)
    ==>
      Ex #sendcrt. C3_cert(tid2)@#sendcrt
  "