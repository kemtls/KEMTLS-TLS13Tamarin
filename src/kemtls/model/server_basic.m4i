dnl(
/*
  Server rules for standard handshake.

  From the specification 2. Protocol overview

         Client                                               Server

  Key  ^ ClientHello
  Exch | + key_share*
       v + pre_shared_key*         -------->
                                                         ServerHello  ^ Key
                                                        + key_share*  | Exch
                                                   + pre_shared_key*  v
                                               {EncryptedExtensions}  ^  Server
                                               {CertificateRequest*}  v  Params
                                                      {Certificate*}  ^
                                                {CertificateVerify*}  | Auth
                                                          {Finished}  v
                                   <--------     [Application Data*]
       ^ {Certificate*}
  Auth | {CertificateVerify*}
       v {Finished}                -------->
*/)

rule start_server:
let
    C = $C
    S = $S

    // Initialises all variables to zero.
    init_state()

    tid = ~tid
    sekem = $sekem
in
    [ Fr(tid)
    ]
  --[ Start(tid, S, 'server'),
      running_server(Identity, S)
    ]->
    [
      State(S0, tid, S, C, ServerState)
    ]


/*
    Server receives vanilla ClientHello
*/
dnl Extensions definitions for vanilla ClientHello
define(<!ClientHelloExtensions!>, <!<SupportedVersions, NamedGroupList, SignatureSchemeList, KeyShareCH >!>)
rule server_recv_client_hello:
let
    set_state()
    psk_ke_mode = 'na'
    k1 = $k1
    k2 = $k2
    client_sekem = <k1, k2>
    nc = new_nc
    epk = new_epk
    ekem = $new_ekem
    epk = kempk(ekem, new_epk)

    // Abstract client identity - does not currently correspond to
    // anything concrete
    // From the server's perspective: associate with an open socket.
    C = $C

    // Server identity - can be interpreted as the hostname
    S = $S

    // Server nonce
    ns = ~new_ns

    messages = <messages, ClientHello>

    psk_ke_mode = 'na'

in
    [ In(ClientHello),
      Fr(ns),
      State(S0, tid, S, C, PrevServerState)[no_precomp]
    ]
  --[ S0(tid),
      Neq(k1, k2)
    ]->
    [
      State(S1, tid, S, C, ServerState)
    ]

define(<!HelloRetryRequestExtensions!>, <!<KeyShareHRR>!>)
rule server_hello_retry_request:
let
    // Cannot HRR twice in a handshake
    prev_hrr = '0'
    prev_sekem = $prev_sekem
    // Copies across all values from PrevServerState to ServerState
    set_state()
    hrr = 'hrr'
    new_ekem = sekem
    ekem = sekem

    C = $C
    S = $S

    messages = <messages, HelloRetryRequest>

in
    [ State(S1, tid, S, C, PrevServerState)[no_precomp]
    ]
  --[ S1_retry(tid),
      Neq(prev_ekem, sekem),
      Instance(tid, S, 'server')
    ]->
    [ Out(HelloRetryRequest),
      State(S0, tid, S, C, ServerState)
    ]

/*
    Server sends basic ServerHello
*/
dnl Extensions definitions for vanilla ServerHello
define(<!ServerHelloExtensions!>, <!<SignatureSchemeList, KeyShareSH>!>)
rule server_emit_hello:
let
    prev_ekem = $prev_ekem
    prev_epk = kempk(prev_ekem, some_esk)
    set_state()

    // Server continuing in normal mode (no PSK mode)
    psk_ke_mode = 'na'
    auth_status = <'0', '0'>

    C = $C
    S = $S

    // Kem ct 
    eseed = ~eseed dnl fresh value
    ess = <ekem, eseed>
    ect = kemencaps(ekem, ess, epk)

    es = EarlySecret
    messages = <messages, ServerHello>
in
    [ State(S1, tid, S, C, PrevServerState),
      Fr(eseed)
    ]
  --[ S1(tid),
      Eq(ekem, sekem),
      Instance(tid, S, 'server'),
      running_server(Nonces, nc, ns),
      KemChal(ekem, some_esk, epk, ect, ess),
      KemEncap(ekem, epk, ess)
    ]->
    [
      State(S2a, tid, S, C, ServerState),
      Out(ServerHello)
    ]

rule server_gen_keys:
let
    set_state()

    S = $S
    C = $C

    hs = HandshakeSecret

    hs_keys = keygen(handshake_traffic_secret(server), hs_key_label())
    hs_keyc = keygen(handshake_traffic_secret(client), hs_key_label())
in
    [ State(S2a, tid, S, C, PrevServerState)[no_precomp]
    ]
  --[ S2a(tid),
      Instance(tid, S, 'server'),
      running_server(HS, hs)
   ]->
    [ State(S2b, tid, S, C, ServerState)
    ]

rule encrypted_extensions:
let
    set_state()

    S = $S
    C = $C

    messages = <messages, EncryptedExtensions>
in
    [ State(S2b, tid, S, C, PrevServerState)[no_precomp]
    ]
  --[ S2b(tid),
      Instance(tid, S, 'server')
    ]->
    [ State(S2c, tid, S, C, ServerState),
      Out(senc{EncryptedExtensions}hs_keys)
    ]

rule server_emit_certificate_request:
let
    prev_psk_ke_mode = 'na'
    set_state()

    S = $S
    C = $C

    certificate_request_context = '0' 
    cert_req = '1' 
    messages = <messages, CertificateRequest>
in
    [ State(S2c, tid, S, C, PrevServerState)[no_precomp]
    ]
  --[ S2c_req(tid),
      Instance(tid, S, 'server'),
      running_server(CertReqCtxt, certificate_request_context)
    ]->
    [ State(S2d, tid, S, C, ServerState),
      Out(senc{CertificateRequest}hs_keys)
    ]

rule server_skip_certificate_request:
let
    set_state()

    cert_req = '0'

    S = $S
    C = $C
in
    [ State(S2c, tid, S, C, PrevServerState)[no_precomp]
    ]
  --[ S2c(tid),
      Instance(tid, S, 'server')
    ]->
    [ State(S2d, tid, S, C, ServerState)
    ]

rule server_emit_cert:
let
    set_state()
    C = $C
    S = $S

    certificate_request_context = '0'
    certificate = kempk($k, ~ltkS)

    messages = <messages, Certificate>
in
    [ State(S2d, tid, S, C, PrevServerState)[no_precomp],
      !Ltk(S, ~ltkS)
    ]--[
      S2d(tid),
      Instance(tid, S, 'server'),
      Eq(psk_ke_mode, 'na')
    ]->
    [
      State(S2e, tid, S, C, ServerState),
      Out(senc{Certificate}hs_keys)
    ]

rule server_receive_kemencaps:
let
    set_state()

    shared_secret = <$k, ~seed>
    ciphertext = kemencaps($k, shared_secret, kempk($k, ~ltkS))

    ss = kemdecaps($k, ciphertext, ~ltkS)

    ahs = AuthHandshakeSecret

    messages = <messages, KemEncapsulation>

    ahs_keyc = keygen(authenticated_handshake_traffic_secret(client), ahs_key_label())
    ahs_keys = keygen(authenticated_handshake_traffic_secret(server), ahs_key_label())

    // we've now got the keys that convince the client of our auth status
    auth_status = <'auth', '0'>
in
    [ 
      State(S2e, tid, S, C, PrevServerState),
      In(senc{KemEncapsulation}hs_keyc),
      !Ltk(S, ~ltkS)
    ] --[
      S2e(tid),
      Instance(tid, S, 'server'),
      running_server(AHS, ahs),
      running_server(HSAHS, hs, ahs, ss),
      running_server(Identity, C, auth_status),
      Eq(psk_ke_mode, 'na'),
      KemDecaps($k, ~ltkS, ss),
      KemChal($k, ~ltkS, kempk($k, ~ltkS), ciphertext, ss)
    ]-> [
      State(S3, tid, S, C, ServerState)
    ]

rule server_recv_client_cert:
let
    prev_cert_req = '1'
    set_state()

    C = $C
    S = $S

    certificate = kempk($k, ~ltkC)
    certificate_request_context = '0' 
    messages = <messages, Certificate>

    dnl clauth_ss is part of the state and passed through to ms later
    clauth_ss = <$k, ~seed>   
    ciphertext = kemencaps($k, clauth_ss, certificate)
    messages = <messages, KemEncapsulation>

    cert_req = '0'
    // we updated the auth status to mutual auth
    auth_status = <'auth', 'auth'>
in
    [ State(S3, tid, S, C, PrevServerState)[no_precomp],
      !Pk(C, kempk($k, ~ltkC)),
      Fr(~seed),
      In(senc{Certificate}ahs_keyc)
    ]
  --[ S3_cert(tid),
      Instance(tid, S, 'server'),
      KemEncap($k, certificate, clauth_ss),
      KemChal($k, ~ltkC, certificate, ciphertext, clauth_ss)
    ]->
    [ State(S3a, tid, S, C, ServerState),
      Out(senc{KemEncapsulation}ahs_keys)
    ]

rule server_skip_client_cert:
let
    prev_cert_req = '0'
    set_state()
in
    [ State(S3, tid, S, C, PrevServerState)[no_precomp] ]
    --[
      S3(tid),
      Instance(tid, S, 'server')
    ]->
    [ State(S3a, tid, S, C, ServerState) ]

rule server_recv_finished:
let
    set_state()

    C = $C
    S = $S

    ms = MasterSecret

    exp_verify_data = compute_finished(client)

    messages = <messages, Finished>

    rms = resumption_master_secret()

    app_keyc = keygen(cats, app_key_label())
    // auth status?
in
    [ State(S3a, tid, S, C, PrevServerState)[no_precomp],
      In(senc{Finished}ahs_keyc)
    ]
  --[ S3a(tid),
      Instance(tid, S, 'server'),
      running_server(AHSMS, ahs, ms, clauth_ss),
      running_server(HSAHSMS, hs, ahs, ms),
      running_server(MS, clauth_ss, ms),
      running_server(RMS, C, rms, messages),
      running_server(Identity, C, auth_status),
      Eq(verify_data, exp_verify_data),
      commit_server(HS, hs),
      commit_server(AHS, ahs),
      commit_server(MS, ms),
      commit_server(Identity, C, auth_status),
      commit_server(Transcript, messages),
      commit_server(Nonces, nc, ns)
    ]->
    [ 
      State(S3fin, tid, S, C, ServerState),
      RecvStream(tid, S, C, auth_status, app_keyc)
    ]

rule server_emit_finished:
let
    //prev_auth_status = <sas, cas>
    set_state()
    S = $S
    C = $C

    verify_data = compute_finished(server)
    finished_messages = messages
    messages = <messages, Finished>

    app_keys = keygen(sats, app_key_label())
    //auth_status = <'auth', cas>
in
    [
      State(S3fin, tid, S, C, PrevServerState)[no_precomp],
      RecvStream(tid, S, C, prev_auth_status, app_keyc)
    ]
    --[
      S3fin(tid),
      Instance(tid, S, 'server'),
      running_server(Mode, psk_ke_mode),
      running_server(Transcript, finished_messages),
      SessionKey(tid, S, C, auth_status, <app_keys, app_keyc>)
    ]->
    [ State(S4, tid, S, C, ServerState),
      Out(senc{Finished}ahs_keys),
      SendStream(tid, S, C, auth_status, app_keys),
      RecvStream(tid, S, C, auth_status, app_keyc)
    ]
